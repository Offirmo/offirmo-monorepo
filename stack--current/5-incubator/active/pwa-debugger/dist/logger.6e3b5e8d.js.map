{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,Q,C,S,C,C,C,C,C,E,A,E,kD,iB,C,GCAA,IAAA,EAAA,EAAA,wCAEA,EAAA,EAAA,gBAIA,IAAM,EAAS,AAAA,CAAA,EAAA,EAAA,SAAQ,AAAR,EAAU,CACxB,KAAM,EAAA,GAAE,CAIR,eAAgB,OACjB,EAIe,CAAA,EAAA,OAAA,CAAA,C,E,C,uC,Q,e,Q,iD,O,E,C,M,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCkDf,EAAA,MAAA,CAAA,EAAA,YAAA,IACC,GADD,EAAA,MAAA,CAAA,EAAA,iBAAA,IAEC,GAFD,EAAA,MAAA,CAAA,EAAA,eAAA,IAGC,GAHD,EAAA,MAAA,CAAA,EAAA,kBAAA,IAIC,GAJD,EAAA,MAAA,CAAA,EAAA,WAAA,IAMC,EAAA,OAAO,EAtER,IAAA,EAAA,EAAA,iB,E,E,c,C,GA0EA,EAAA,EAAA,0CAAA,EAAA,SAAA,CAAA,EAAA,GAtEA,IAAM,EAAK,QACT,CAAA,UAAkB,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","sources":["<anon>","5-incubator/active/pwa-debugger/src/app/services/logger.ts","3-advanced--multi/universal-debug-api--browser/src/index.ts","3-advanced--multi/universal-debug-api--browser/src/v1/index.ts","2-foundation/practical-logger--core/src/index.ts","2-foundation/practical-logger--core/src/core.ts","2-foundation/practical-logger--core/src/consts.ts","2-foundation/practical-logger--core/src/consts-base.ts","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","2-foundation/practical-logger--core/src/normalize-args.ts","2-foundation/practical-logger--types/src/index.ts","2-foundation/practical-logger--browser/src/index.ts","1-stdlib/tiny-singleton/src/index.ts","2-foundation/practical-logger--browser/src/sinks/index.ts","2-foundation/practical-logger--browser/src/sinks/advanced/firefox.ts","2-foundation/practical-logger--browser/src/sinks/common.ts","2-foundation/practical-logger--browser/src/sinks/advanced/common.ts","2-foundation/practical-logger--browser/src/sinks/advanced/chromium.ts","2-foundation/practical-logger--browser/src/sinks/advanced/safari.ts","2-foundation/practical-logger--browser/src/sinks/no-css.ts","2-foundation/practical-logger--browser/src/better-console-groups/practical-logger.ts","3-advanced--multi/universal-debug-api--browser/src/v1/keys.ts","3-advanced--multi/universal-debug-api--browser/src/consts.ts","5-incubator/active/pwa-debugger/src/app/consts.ts"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"26tYz\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nvar _universalDebugApiBrowser = require(\"@offirmo/universal-debug-api-browser\");\nvar _constsTs = require(\"../consts.ts\");\n/////////////////////////////////////////////////\nconst logger = (0, _universalDebugApiBrowser.getLogger)({\n    name: (0, _constsTs.LIB),\n    //suggestedLevel: 'error',\n    //suggestedLevel: 'warn',\n    //suggestedLevel: 'verbose',\n    suggestedLevel: \"silly\"\n});\n/////////////////////////////////////////////////\nexports.default = logger;\n\n},{\"@offirmo/universal-debug-api-browser\":\"cG4hW\",\"../consts.ts\":\"4GFnz\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"fCxzd\"}],\"cG4hW\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"getLogger\", ()=>getLogger);\nparcelHelpers.export(exports, \"exposeInternal\", ()=>exposeInternal);\nparcelHelpers.export(exports, \"overrideHook\", ()=>overrideHook);\nparcelHelpers.export(exports, \"addDebugCommand\", ()=>addDebugCommand);\nparcelHelpers.export(exports, \"createV1\", ()=>(0, _indexJsDefault.default));\nvar _indexJs = require(\"./v1/index.js\");\nvar _indexJsDefault = parcelHelpers.interopDefault(_indexJs);\n// types\nvar _universalDebugApiInterface = require(\"@offirmo/universal-debug-api-interface\");\nparcelHelpers.exportAll(_universalDebugApiInterface, exports);\n// ensure the root is present\nconst _p = \"_debug\";\nglobalThis[_p] ||= {};\nconst root = globalThis[_p];\n//////////// v1 ////////////\n// TODO extract this common code!\n// install globally if no better implementation already present\nroot.v1 = ((existing)=>{\n    const candidate = (0, _indexJsDefault.default)();\n    let ownLogger = candidate.getLogger({\n        name: (0, _indexJs.OWN_LOGGER_NAME)\n    });\n    ownLogger.debug(\"as a candidate, attempting to attach\\u2026\");\n    if (!existing) {\n        ownLogger.debug(\"nominal install \\u2705\");\n        return candidate // nominal case, this implementation is first\n        ;\n    }\n    // something is wrong.\n    // We CAN'T replace a non-placeholder existing one, even if we are more recent,\n    // because the existing one may already have been called\n    // and be having a state that can't be carried over.\n    // HOWEVER some hints may help the user:\n    let isExistingAPlaceholder = !existing._ // we know that the placeholder doesn't define this optional prop\n    ;\n    if (isExistingAPlaceholder) {\n        ownLogger.warn(\"install warning: a placeholder is already present, you may have missed some calls! the true implementation should be imported earlier! Check the order of your scripts/imports!\");\n        // better than nothing, may still miss some calls\n        ownLogger.log(\"as a candidate, replacing existing \\u26A0\");\n        return candidate;\n    }\n    ownLogger = existing.getLogger({\n        name: (0, _indexJs.OWN_LOGGER_NAME)\n    });\n    ownLogger.warn(\"install warning: several true implementation coexists, only the top module should import it. Check your submodules!\");\n    // note that this can happens if a bundler incorrectly duplicates the same module\n    try {\n        const minVersion = Math.min(existing._.minor, candidate._.minor);\n        if (minVersion !== candidate._.minor) ownLogger.warn(`install warning: several true implementation coexists, including an outdated one: \"v${minVersion}\"!`);\n    } catch (err) {\n        ownLogger.warn(err);\n    }\n    ownLogger.log(\"as a candidate, discarding myself: existing is good enough \\u2705\");\n    return existing // don't replace\n    ;\n})(root.v1);\n//////////// latest ////////////\n// directly expose the latest implementation known to this lib\nconst instance = root.v1;\nconst { getLogger, exposeInternal, overrideHook, addDebugCommand } = instance;\n\n},{\"./v1/index.js\":\"lNYhO\",\"@offirmo/universal-debug-api-interface\":false,\"@parcel/transformer-js/src/esmodule-helpers.js\":\"fCxzd\"}],\"lNYhO\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"OWN_LOGGER_NAME\", ()=>OWN_LOGGER_NAME);\nparcelHelpers.export(exports, \"default\", ()=>create);\nvar _practicalLoggerCore = require(\"@offirmo/practical-logger-core\");\nvar _practicalLoggerBrowser = require(\"@offirmo/practical-logger-browser\");\nvar _keysJs = require(\"./keys.js\");\nconst OWN_LOGGER_NAME = (0, _keysJs.LS_ROOT);\nconst REVISION = 100.;\nfunction create() {\n    //console.trace('[UDA--browser installing…]')\n    ////////////////////////////////////\n    const loggers = {} // to avoid creating duplicates\n    ;\n    const debugCommands = {} // TODO check\n    ;\n    const exposed = {};\n    const overrides = {} // we'll expose them for clarity\n    ;\n    ////////////////////////////////////\n    // TODO override?\n    // TODO allow off?\n    const _ownLogger = loggers[OWN_LOGGER_NAME] = (0, _practicalLoggerBrowser.createLogger)({\n        name: OWN_LOGGER_NAME,\n        suggestedLevel: \"fatal\"\n    });\n    function _getOverrideRequestedSJson(ovKey) {\n        try {\n            const LSKey = (0, _keysJs.getLSKeyForOverride)(ovKey);\n            //console.log(`LSKey = \"${LSKey}\"`)\n            const rawValue = localStorage.getItem(LSKey);\n            //console.log(`LSKey content = \"${value}\"`)\n            return rawValue;\n        } catch (err) {\n            _ownLogger.warn(`\\u{1F534} error reading LS for override \"${ovKey}\"!`, {\n                err\n            });\n            return null;\n        }\n    }\n    const forcedLevel = _getOverrideRequestedSJson((0, _keysJs.getOverrideKeyForLogger)(\"_UDA_internal\"));\n    try {\n        if (forcedLevel) _ownLogger.setLevel(JSON.parse(forcedLevel));\n    } catch (err) {\n        _ownLogger.fatal(`\\u{1F534} error setting internal logger forced level: \"${forcedLevel}\"!`);\n    }\n    _ownLogger.debug(`Instantiated. (revision: ${REVISION})`);\n    function _getOverride(key) {\n        if (!overrides[key]) {\n            // we only read the LS once for speed reason\n            overrides[key] = {\n                // so far:\n                isOn: false,\n                value: undefined\n            };\n            const rawValue = _getOverrideRequestedSJson(key);\n            if (rawValue) try {\n                overrides[key].isOn = true;\n                // we allow the non-JSON \"undefined\"\n                const value = rawValue === \"undefined\" ? undefined : JSON.parse(rawValue);\n                overrides[key].value = value;\n                _ownLogger.log(` \\u{1F535} overriden \"${key}\"`, {\n                    value\n                });\n            } catch (err) {\n                // TODO only complain once\n                // TODO seen crash, to check again\n                _ownLogger.warn(`\\u{1F534} failed to override \"${key}\"!`, {\n                    badValue: rawValue,\n                    err\n                });\n            }\n        }\n        return overrides[key];\n    }\n    ////////////////////////////////////\n    const api = {\n        getLogger,\n        exposeInternal,\n        overrideHook,\n        addDebugCommand,\n        _: {\n            exposed,\n            overrides,\n            minor: REVISION,\n            source: \"browser-lib\",\n            create\n        }\n    };\n    ////////////////////////////////////\n    function overrideHook(key, defaultValue) {\n        try {\n            const status = _getOverride(key);\n            if (status.isOn) return status.value;\n        } catch (err) {\n            // should never happen because _getOverride() already catch\n            // TODO check!\n            _ownLogger.error(\"overrideHook(): error retrieving override!\", {\n                key,\n                err\n            });\n        }\n        return defaultValue;\n    }\n    function getLogger(p = {}) {\n        const name = p.name || (0, _practicalLoggerCore.DEFAULT_LOGGER_KEY // we need a name immediately\n        );\n        if (!loggers[name]) {\n            try {\n                const ovKey = (0, _keysJs.getOverrideKeyForLogger)(name);\n                if (!p.forcedLevel && _getOverrideRequestedSJson(ovKey)) p = {\n                    ...p,\n                    forcedLevel: overrideHook(ovKey, p.suggestedLevel || (0, _practicalLoggerCore.DEFAULT_LOG_LEVEL))\n                };\n            } catch (err) {\n                // this warning should appear only once on creation ✔\n                _ownLogger.error(\"getLogger(): error overriding the level!\", {\n                    name,\n                    err\n                });\n            }\n            loggers[name] = (0, _practicalLoggerBrowser.createLogger)(p);\n        }\n        return loggers[name];\n    }\n    function exposeInternal(path, value) {\n        _ownLogger.warn(\"exposeInternal(): alpha, not documented!\");\n        try {\n            const pathParts = path.split(\".\") // TODO switch to / ?\n            ;\n            const lastIndex = pathParts.length - 1;\n            let root = exposed;\n            pathParts.forEach((p, index)=>{\n                root[p] = root[p] || (index === lastIndex ? value : {});\n                root = root[p];\n            });\n        } catch (err) {\n            _ownLogger.error(\"exposeInternal(): error exposing!\", {\n                path,\n                err\n            });\n        }\n    }\n    function addDebugCommand(commandName, callback) {\n        // TODO\n        _ownLogger.warn(\"addDebugCommand(): alpha, not documented!\");\n        // TODO try catch\n        debugCommands[commandName] = callback;\n    }\n    return api;\n}\n\n},{\"@offirmo/practical-logger-core\":\"2sUTQ\",\"@offirmo/practical-logger-browser\":\"hVQUU\",\"./keys.js\":\"2DyN2\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"fCxzd\"}],\"2sUTQ\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"ALL_LOG_LEVELS\", ()=>(0, _constsJs.ALL_LOG_LEVELS));\nparcelHelpers.export(exports, \"LOG_LEVEL_TO_INTEGER\", ()=>(0, _constsJs.LOG_LEVEL_TO_INTEGER));\nparcelHelpers.export(exports, \"LOG_LEVEL_TO_HUMAN\", ()=>(0, _constsJs.LOG_LEVEL_TO_HUMAN));\nparcelHelpers.export(exports, \"DEFAULT_LOG_LEVEL\", ()=>(0, _constsJs.DEFAULT_LOG_LEVEL));\nparcelHelpers.export(exports, \"DEFAULT_LOGGER_KEY\", ()=>(0, _constsJs.DEFAULT_LOGGER_KEY));\nparcelHelpers.export(exports, \"checkLevel\", ()=>(0, _coreJs.checkLevel));\nparcelHelpers.export(exports, \"createLogger\", ()=>(0, _coreJs.create));\nvar _coreJs = require(\"./core.js\");\nvar _practicalLoggerTypes = require(\"@offirmo/practical-logger-types\");\nparcelHelpers.exportAll(_practicalLoggerTypes, exports);\nvar _constsJs = require(\"./consts.js\");\nvar _normalizeArgsJs = require(\"./normalize-args.js\");\nparcelHelpers.exportAll(_normalizeArgsJs, exports);\n\n},{\"./core.js\":\"joF6a\",\"@offirmo/practical-logger-types\":\"iEJ2W\",\"./consts.js\":\"2Ogw5\",\"./normalize-args.js\":\"kN00c\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"fCxzd\"}],\"joF6a\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"checkLevel\", ()=>checkLevel);\nparcelHelpers.export(exports, \"create\", ()=>create);\nvar _constsJs = require(\"./consts.js\");\nvar _normalizeArgsJs = require(\"./normalize-args.js\");\nfunction checkLevel(level) {\n    if (!(0, _constsJs.ALL_LOG_LEVELS).includes(level)) throw new Error(`[${(0, _constsJs.LIB)}] Not a valid log level: \"${level}\"!`);\n}\nfunction create({ name = (0, _constsJs.DEFAULT_LOGGER_KEY), suggestedLevel = (0, _constsJs.DEFAULT_LOG_LEVEL), forcedLevel, commonDetails = {} } = {}, outputFn = console.log) {\n    const internalState = {\n        name,\n        level: forcedLevel || suggestedLevel,\n        commonDetails: {\n            ...commonDetails\n        },\n        outputFn\n    };\n    let levelAsInt = 100 // so far\n    ;\n    const logger = (0, _constsJs.ALL_LOG_LEVELS).reduce((logger, level)=>{\n        const primitive = function(rawMessage, rawDetails) {\n            if (!isLevelEnabled(level)) return;\n            const [message, details] = (0, _normalizeArgsJs.normalizeArguments)(arguments);\n            internalState.outputFn(serializer(level, message, details));\n        };\n        logger[level] = primitive;\n        return logger;\n    }, {\n        setLevel,\n        getLevel,\n        addCommonDetails,\n        group () {},\n        groupCollapsed () {},\n        groupEnd () {}\n    });\n    function setLevel(level) {\n        checkLevel(level);\n        internalState.level = level;\n        levelAsInt = (0, _constsJs.LOG_LEVEL_TO_INTEGER)[level];\n    }\n    setLevel(getLevel()) // to check it\n    ;\n    function isLevelEnabled(level) {\n        checkLevel(level);\n        return (0, _constsJs.LOG_LEVEL_TO_INTEGER)[level] <= levelAsInt;\n    }\n    function getLevel() {\n        return internalState.level;\n    }\n    function addCommonDetails(details) {\n        if (details[\"err\"]) throw new Error(`[${(0, _constsJs.LIB)}] Can't set reserved property \"err\"!`);\n        internalState.commonDetails = {\n            ...internalState.commonDetails,\n            ...details\n        };\n    }\n    function serializer(level, msg, { err, ...details }) {\n        const payload = {\n            level,\n            name,\n            msg,\n            time: +new Date(),\n            details: {\n                ...internalState.commonDetails,\n                ...details\n            }\n        };\n        if (err) payload.err = err;\n        return payload;\n    }\n    return logger;\n}\n\n},{\"./consts.js\":\"2Ogw5\",\"./normalize-args.js\":\"kN00c\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"fCxzd\"}],\"2Ogw5\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"LIB\", ()=>LIB);\nparcelHelpers.export(exports, \"LOG_LEVEL_TO_INTEGER\", ()=>LOG_LEVEL_TO_INTEGER);\nparcelHelpers.export(exports, \"ALL_LOG_LEVELS\", ()=>ALL_LOG_LEVELS);\nparcelHelpers.export(exports, \"LOG_LEVEL_TO_HUMAN\", ()=>LOG_LEVEL_TO_HUMAN);\nvar _constsBaseJs = require(\"./consts-base.js\");\nparcelHelpers.exportAll(_constsBaseJs, exports);\nconst LIB = \"@offirmo/practical-logger-core\";\nconst LOG_LEVEL_TO_INTEGER = {\n    fatal: 1,\n    emerg: 2,\n    alert: 10,\n    crit: 20,\n    error: 30,\n    warning: 40,\n    warn: 40,\n    notice: 45,\n    info: 50,\n    verbose: 70,\n    log: 80,\n    debug: 81,\n    trace: 90,\n    silly: 100\n};\nconst ALL_LOG_LEVELS = Object.keys(LOG_LEVEL_TO_INTEGER).sort((a, b)=>LOG_LEVEL_TO_INTEGER[a] - LOG_LEVEL_TO_INTEGER[b]);\nconst LOG_LEVEL_TO_HUMAN = ALL_LOG_LEVELS.reduce((acc, ll)=>{\n    acc[ll] = ({\n        em: \"emergency\",\n        wa: \"warn\"\n    })[ll.slice(0, 1)] || ll;\n    return acc;\n}, {});\n\n},{\"./consts-base.js\":\"iLMFK\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"fCxzd\"}],\"iLMFK\":[function(require,module,exports) {\n// base to be directly importable from other modules\n// without a full lib penalty.\n// This a very very specific use case, don't mind.\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"DEFAULT_LOG_LEVEL\", ()=>DEFAULT_LOG_LEVEL);\nparcelHelpers.export(exports, \"DEFAULT_LOGGER_KEY\", ()=>DEFAULT_LOGGER_KEY);\nconst DEFAULT_LOG_LEVEL = \"error\";\nconst DEFAULT_LOGGER_KEY = \"\" // yes, can be used as a key\n;\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"fCxzd\"}],\"fCxzd\":[function(require,module,exports) {\nexports.interopDefault = function(a) {\n    return a && a.__esModule ? a : {\n        default: a\n    };\n};\nexports.defineInteropFlag = function(a) {\n    Object.defineProperty(a, \"__esModule\", {\n        value: true\n    });\n};\nexports.exportAll = function(source, dest) {\n    Object.keys(source).forEach(function(key) {\n        if (key === \"default\" || key === \"__esModule\" || Object.prototype.hasOwnProperty.call(dest, key)) return;\n        Object.defineProperty(dest, key, {\n            enumerable: true,\n            get: function() {\n                return source[key];\n            }\n        });\n    });\n    return dest;\n};\nexports.export = function(dest, destName, get) {\n    Object.defineProperty(dest, destName, {\n        enumerable: true,\n        get: get\n    });\n};\n\n},{}],\"kN00c\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n// TODO externalize?\nparcelHelpers.export(exports, \"looksLikeAnError\", ()=>looksLikeAnError);\n// harmonize\n// also try to recover from incorrect invocations\nparcelHelpers.export(exports, \"normalizeArguments\", ()=>normalizeArguments);\nfunction looksLikeAnError(x) {\n    return !!(x?.name && x?.message && x?.stack);\n}\nfunction normalizeArguments(raw_args) {\n    const message_parts = [];\n    let details = {};\n    let err = undefined;\n    Array.from(raw_args).forEach((arg)=>{\n        if (!arg) return;\n        // errors are first class, look for them first\n        if (looksLikeAnError(arg)) {\n            if (!err) err = arg // extract it\n            ;\n            return;\n        }\n        if (!err && looksLikeAnError(arg.err)) err = arg.err // extract it\n        ;\n        if (typeof arg === \"object\") {\n            details = {\n                ...details,\n                ...arg\n            };\n            return;\n        }\n        message_parts.push(String(arg));\n    });\n    if (typeof details[\"message\"] === \"string\" && !message_parts.length) {\n        message_parts.push(details[\"message\"]);\n        delete details[\"message\"];\n    }\n    const message = message_parts.join(\" \") || err?.message || \"(no message)\";\n    if (err) details[\"err\"] = err;\n    else delete details[\"err\"] // because could be present but not be a correct err type\n    ;\n    return [\n        message,\n        details\n    ];\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"fCxzd\"}],\"iEJ2W\":[function(require,module,exports) {\n//////////// Public interface (for logger usage) ////////////\n// List of all known logging primitives, in order of criticity\n// https://docs.google.com/spreadsheets/d/1Bc32plQTswNdCqXS99deB0n7Te7FfD7uepGAOOlPbvY/edit?usp=sharing\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"fCxzd\"}],\"hVQUU\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"DEFAULT_LOG_LEVEL\", ()=>(0, _practicalLoggerCore.DEFAULT_LOG_LEVEL));\nparcelHelpers.export(exports, \"DEFAULT_LOGGER_KEY\", ()=>(0, _practicalLoggerCore.DEFAULT_LOGGER_KEY));\n/////////////////////////////////////////////////\nparcelHelpers.export(exports, \"_request_install_better_console_groups_if_not_already\", ()=>_request_install_better_console_groups_if_not_already);\nparcelHelpers.export(exports, \"createLogger\", ()=>createLogger);\nvar _tinySingleton = require(\"@offirmo/tiny-singleton\");\nvar _tinySingletonDefault = parcelHelpers.interopDefault(_tinySingleton);\nvar _practicalLoggerCore = require(\"@offirmo/practical-logger-core\");\nvar _indexJs = require(\"./sinks/index.js\");\nvar _practicalLoggerJs = require(\"./better-console-groups/practical-logger.js\");\nvar _practicalLoggerJsDefault = parcelHelpers.interopDefault(_practicalLoggerJs);\nvar _practicalLoggerTypes = require(\"@offirmo/practical-logger-types\");\nparcelHelpers.exportAll(_practicalLoggerTypes, exports);\n/////////////////////////////////////////////////\nconst ORIGINAL_CONSOLE = console;\n/////////////////////////////////////////////////\nconst _request_install_better_console_groups_if_not_already = (0, _tinySingletonDefault.default)((active = true)=>{\n    if (active) (0, _practicalLoggerJsDefault.default)();\n});\nfunction createLogger(p = {}) {\n    _request_install_better_console_groups_if_not_already(p.sinkOptions?.betterGroups !== false);\n    const sink = p.sinkOptions?.sink || (0, _indexJs.create)(p.sinkOptions);\n    const { group, groupCollapsed, groupEnd } = ORIGINAL_CONSOLE;\n    return {\n        ...(0, _practicalLoggerCore.createLogger)(p, sink),\n        group,\n        groupCollapsed,\n        groupEnd\n    };\n}\n\n},{\"@offirmo/tiny-singleton\":\"6DFZz\",\"@offirmo/practical-logger-core\":\"2sUTQ\",\"./sinks/index.js\":\"9XoP8\",\"./better-console-groups/practical-logger.js\":\"b6Dyh\",\"@offirmo/practical-logger-types\":false,\"@parcel/transformer-js/src/esmodule-helpers.js\":\"fCxzd\"}],\"6DFZz\":[function(require,module,exports) {\n/////////////////////////////////////////////////\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"default\", ()=>tiny_singleton);\n/////////////////////////////////////////////////\nparcelHelpers.export(exports, \"tiny_singleton\", ()=>tiny_singleton);\nfunction tiny_singleton(generator) {\n    let instantiated = false;\n    let instance;\n    return function get(...args) {\n        if (!instantiated) {\n            instance = generator(...args);\n            instantiated = true;\n        }\n        return instance;\n    };\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"fCxzd\"}],\"9XoP8\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"create\", ()=>create);\nvar _firefoxJs = require(\"./advanced/firefox.js\");\nvar _firefoxJsDefault = parcelHelpers.interopDefault(_firefoxJs);\nvar _chromiumJs = require(\"./advanced/chromium.js\");\nvar _chromiumJsDefault = parcelHelpers.interopDefault(_chromiumJs);\nvar _safariJs = require(\"./advanced/safari.js\");\nvar _safariJsDefault = parcelHelpers.interopDefault(_safariJs);\nvar _noCssJs = require(\"./no-css.js\");\nvar _noCssJsDefault = parcelHelpers.interopDefault(_noCssJs);\n// TODO export that?\nfunction quick_detect_browser() {\n    // https://stackoverflow.com/a/9851769/587407\n    // https://dev.to/_elmahdim/safe-reliable-browser-sniffing-39bp\n    try {\n        if (window.InstallTrigger) return \"firefox\";\n        if (window.ApplePaySession) return \"safari\";\n        if (window.chrome) return \"chromium\";\n    } catch  {\n    /* ignore */ }\n    return \"other\";\n}\nfunction create(options = {}) {\n    if (options.useCss === false) return (0, _noCssJsDefault.default)(options);\n    switch(options.explicitBrowser || quick_detect_browser()){\n        case \"firefox\":\n            return 0, _firefoxJsDefault.default;\n        case \"safari\":\n            return 0, _safariJsDefault.default;\n        case \"chromium\":\n            return 0, _chromiumJsDefault.default;\n        default:\n            return (0, _noCssJsDefault.default)(options);\n    }\n}\n\n},{\"./advanced/firefox.js\":\"bWs7i\",\"./advanced/chromium.js\":\"cp1AG\",\"./advanced/safari.js\":\"9O39O\",\"./no-css.js\":\"5aRBw\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"fCxzd\"}],\"bWs7i\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"sink\", ()=>sink);\nvar _commonJs = require(\"../common.js\");\nvar _commonJs1 = require(\"./common.js\");\nfunction has_details_indicator(console_method_name) {\n    return console_method_name === \"error\";\n}\nconst HEADER_FONT_SIZE_STYLE = \"font-size: 10px\";\nconst sink = (payload)=>{\n    const { level, name, msg } = payload;\n    const console_method_name = (0, _commonJs.LEVEL_TO_CONSOLE_METHOD)[level];\n    const console_method = console[console_method_name];\n    let line = [\n        \"\"\n    ];\n    if (!has_details_indicator(console_method_name)) line = (0, _commonJs1.add_styled_string)(line, \"\\u25B7\", (0, _commonJs1.LEVEL_TO_COLOR_STYLE)[level], \"font-size: 8px\", (0, _commonJs1.FONT_FAMILY_BETTER_PROPORTIONAL), \"margin-left: .35em\", \"margin-right: .5em\");\n    line = (0, _commonJs1.add_styled_string)(line, \"[\", (0, _commonJs1.LEVEL_TO_COLOR_STYLE)[level], HEADER_FONT_SIZE_STYLE, (0, _commonJs1.FONT_FAMILY_BETTER_PROPORTIONAL));\n    line = (0, _commonJs1.add_styled_string)(line, (0, _commonJs.to_uniform_level)(level), (0, _commonJs1.LEVEL_TO_COLOR_STYLE)[level], HEADER_FONT_SIZE_STYLE, (0, _commonJs1.FONT_FAMILY_BETTER_MONOSPACE));\n    line = (0, _commonJs1.add_styled_string)(line, \"] \", (0, _commonJs1.LEVEL_TO_COLOR_STYLE)[level], HEADER_FONT_SIZE_STYLE, (0, _commonJs1.FONT_FAMILY_BETTER_PROPORTIONAL));\n    line = (0, _commonJs1.add_styled_string)(line, \"\", \"font-size: unset\");\n    if (name) line = (0, _commonJs1.add_styled_string)(line, `${name} \\u{203A} `, (0, _commonJs1.LEVEL_TO_COLOR_STYLE)[level], (0, _commonJs1.FONT_FAMILY_BETTER_PROPORTIONAL));\n    line = (0, _commonJs1.add_styled_string)(line, msg, (0, _commonJs1.LEVEL_TO_COLOR_STYLE)[level], (0, _commonJs1.FONT_FAMILY_BETTER_PROPORTIONAL));\n    console_method(...(0, _commonJs1.build_args)(line, payload));\n};\nexports.default = sink;\n\n},{\"../common.js\":\"abC0y\",\"./common.js\":\"iimP8\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"fCxzd\"}],\"abC0y\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"LEVEL_TO_CONSOLE_METHOD\", ()=>LEVEL_TO_CONSOLE_METHOD);\nparcelHelpers.export(exports, \"to_uniform_level\", ()=>to_uniform_level);\nvar _practicalLoggerCore = require(\"@offirmo/practical-logger-core\");\nconst LEVEL_TO_CONSOLE_METHOD = {\n    fatal: \"error\",\n    emerg: \"error\",\n    alert: \"error\",\n    crit: \"error\",\n    error: \"error\",\n    warning: \"warn\",\n    warn: \"warn\",\n    notice: \"info\",\n    info: \"info\",\n    verbose: \"info\",\n    log: \"log\",\n    // REMINDER\n    // console.debug() needs to be ENABLED in the dev tools to be visible!\n    debug: \"debug\",\n    trace: \"debug\",\n    silly: \"debug\"\n};\nconst MIN_WIDTH = 5;\nfunction to_uniform_level(level) {\n    let str = (0, _practicalLoggerCore.LOG_LEVEL_TO_HUMAN)[level] //.slice(0, MIN_WIDTH)\n    ;\n    //if (str.length < MIN_WIDTH)\n    str = (str + \"         \").slice(0, MIN_WIDTH);\n    return str;\n}\n\n},{\"@offirmo/practical-logger-core\":\"2sUTQ\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"fCxzd\"}],\"iimP8\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"FONT_FAMILY_BETTER_PROPORTIONAL\", ()=>FONT_FAMILY_BETTER_PROPORTIONAL);\nparcelHelpers.export(exports, \"FONT_FAMILY_BETTER_MONOSPACE\", ()=>FONT_FAMILY_BETTER_MONOSPACE);\nparcelHelpers.export(exports, \"LEVEL_TO_COLOR_STYLE\", ()=>LEVEL_TO_COLOR_STYLE);\nparcelHelpers.export(exports, \"add_styled_string\", ()=>add_styled_string);\nparcelHelpers.export(exports, \"build_args\", ()=>build_args);\nconst FONT_FAMILY_BETTER_PROPORTIONAL = \"font-family: \" + [\n    \"-apple-system\",\n    \"BlinkMacSystemFont\",\n    \"noto\",\n    \"roboto\",\n    \"sans-serif\"\n].join(\", \");\nconst FONT_FAMILY_BETTER_MONOSPACE = \"font-family: \" + [\n    '\"Fira Code\"',\n    \"Menlo\",\n    \"Consolas\",\n    \"monospace\"\n].join(\", \");\nconst LEVEL_TO_COLOR_STYLE = {\n    // empty = no need, console method already covers it well\n    fatal: \"\",\n    emerg: \"\",\n    alert: \"\",\n    crit: \"\",\n    error: \"\",\n    warning: \"\",\n    warn: \"\",\n    notice: \"color: #659AD2\",\n    info: \"color: #659AD2\",\n    verbose: \"color: #659AD2\",\n    log: \"\",\n    debug: \"color: #9AA2AA\",\n    trace: \"color: #9AA2AA\",\n    silly: \"color: #9AA2AA\"\n};\nfunction add_styled_string(line, chunk, ...styles) {\n    const [existing_chunks, ...existing_chunks_styles] = line;\n    return [\n        existing_chunks + \"%c\" + chunk,\n        ...existing_chunks_styles,\n        styles.join(\";\") + \";\"\n    ];\n}\nfunction build_args(line, payload) {\n    const { err } = payload;\n    let { details } = payload;\n    const args = line;\n    if (err) // err will be passed as the LAST arg for reasons (see below)\n    // however the \"last arg\" display doesn't allow examining the optional err properties\n    // so we also add the err to the details:\n    // (tested on FF/Chrome/Safari)\n    details = {\n        ...details,\n        err\n    };\n    if (Object.keys(details).length) args.push(details);\n    // err *as an arg* triggers a good display of the stacktrace\n    // however it should be LAST because it takes a lot of room and \"hides\" further args\n    // (tested on FF/Chrome/Safari)\n    if (err) args.push(err);\n    return args;\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"fCxzd\"}],\"cp1AG\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"sink\", ()=>sink);\nvar _commonJs = require(\"../common.js\");\nvar _commonJs1 = require(\"./common.js\");\nfunction has_details_indicator(console_method_name) {\n    return console_method_name === \"error\" || console_method_name === \"warn\";\n}\nconst HEADER_FONT_SIZE_STYLE = \"font-size: 8px\";\nconst MESSAGE_FONT_SIZE_STYLE = \"font-size: 11px\";\nconst sink = (payload)=>{\n    const { level, name, msg } = payload;\n    const console_method_name = (0, _commonJs.LEVEL_TO_CONSOLE_METHOD)[level];\n    const console_method = console[console_method_name];\n    let line = [\n        \"\"\n    ];\n    if (!has_details_indicator(console_method_name)) line = (0, _commonJs1.add_styled_string)(line, \"\\u25B7\", (0, _commonJs1.LEVEL_TO_COLOR_STYLE)[level], \"font-size: 8px\", (0, _commonJs1.FONT_FAMILY_BETTER_PROPORTIONAL), \"margin-left: .1em\", \"margin-right: .2em\");\n    line = (0, _commonJs1.add_styled_string)(line, \"[\", (0, _commonJs1.LEVEL_TO_COLOR_STYLE)[level], HEADER_FONT_SIZE_STYLE, (0, _commonJs1.FONT_FAMILY_BETTER_PROPORTIONAL));\n    line = (0, _commonJs1.add_styled_string)(line, (0, _commonJs.to_uniform_level)(level), (0, _commonJs1.LEVEL_TO_COLOR_STYLE)[level], HEADER_FONT_SIZE_STYLE, (0, _commonJs1.FONT_FAMILY_BETTER_MONOSPACE));\n    line = (0, _commonJs1.add_styled_string)(line, \"] \", (0, _commonJs1.LEVEL_TO_COLOR_STYLE)[level], HEADER_FONT_SIZE_STYLE, (0, _commonJs1.FONT_FAMILY_BETTER_PROPORTIONAL));\n    line = (0, _commonJs1.add_styled_string)(line, \"\", \"font-size: unset\");\n    if (name) line = (0, _commonJs1.add_styled_string)(line, `${name} \\u{203A} `, (0, _commonJs1.LEVEL_TO_COLOR_STYLE)[level], (0, _commonJs1.FONT_FAMILY_BETTER_PROPORTIONAL), MESSAGE_FONT_SIZE_STYLE);\n    line = (0, _commonJs1.add_styled_string)(line, msg, (0, _commonJs1.LEVEL_TO_COLOR_STYLE)[level], (0, _commonJs1.FONT_FAMILY_BETTER_PROPORTIONAL), MESSAGE_FONT_SIZE_STYLE);\n    console_method(...(0, _commonJs1.build_args)(line, payload));\n};\nexports.default = sink;\n\n},{\"../common.js\":\"abC0y\",\"./common.js\":\"iimP8\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"fCxzd\"}],\"9O39O\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"sink\", ()=>sink);\nvar _commonJs = require(\"../common.js\");\nvar _commonJs1 = require(\"./common.js\");\nfunction has_details_indicator(console_method_name, details) {\n    return details || console_method_name === \"error\";\n}\nconst HEADER_FONT_SIZE_STYLE = \"font-size: 9px\";\nconst sink = (payload)=>{\n    const { level, name, msg, details } = payload;\n    const console_method_name = (0, _commonJs.LEVEL_TO_CONSOLE_METHOD)[level];\n    const console_method = console[console_method_name];\n    let line = [\n        \"\"\n    ];\n    if (!has_details_indicator(console_method_name, details)) line = (0, _commonJs1.add_styled_string)(line, \"\\u25B7\", (0, _commonJs1.LEVEL_TO_COLOR_STYLE)[level], \"font-size: 10px\", (0, _commonJs1.FONT_FAMILY_BETTER_PROPORTIONAL), \"margin-left: .15em\", \"margin-right: .4em\");\n    line = (0, _commonJs1.add_styled_string)(line, \"[\", (0, _commonJs1.LEVEL_TO_COLOR_STYLE)[level], HEADER_FONT_SIZE_STYLE, (0, _commonJs1.FONT_FAMILY_BETTER_PROPORTIONAL));\n    line = (0, _commonJs1.add_styled_string)(line, (0, _commonJs.to_uniform_level)(level), (0, _commonJs1.LEVEL_TO_COLOR_STYLE)[level], HEADER_FONT_SIZE_STYLE, (0, _commonJs1.FONT_FAMILY_BETTER_MONOSPACE));\n    line = (0, _commonJs1.add_styled_string)(line, \"] \", (0, _commonJs1.LEVEL_TO_COLOR_STYLE)[level], HEADER_FONT_SIZE_STYLE, (0, _commonJs1.FONT_FAMILY_BETTER_PROPORTIONAL));\n    line = (0, _commonJs1.add_styled_string)(line, \"\", \"font-size: unset\");\n    if (name) line = (0, _commonJs1.add_styled_string)(line, `${name} \\u{203A} `, (0, _commonJs1.LEVEL_TO_COLOR_STYLE)[level], (0, _commonJs1.FONT_FAMILY_BETTER_PROPORTIONAL));\n    line = (0, _commonJs1.add_styled_string)(line, msg, (0, _commonJs1.LEVEL_TO_COLOR_STYLE)[level], (0, _commonJs1.FONT_FAMILY_BETTER_PROPORTIONAL));\n    console_method(...(0, _commonJs1.build_args)(line, payload));\n};\nexports.default = sink;\n\n},{\"../common.js\":\"abC0y\",\"./common.js\":\"iimP8\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"fCxzd\"}],\"5aRBw\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"default\", ()=>create);\nvar _commonJs = require(\"./common.js\");\nfunction create(options = {}) {\n    return (payload)=>{\n        const { level, name, msg, err, details } = payload;\n        const console_method_name = (0, _commonJs.LEVEL_TO_CONSOLE_METHOD)[level];\n        const console_method = console[console_method_name];\n        const line = [\n            \"[\",\n            (0, _commonJs.to_uniform_level)(level),\n            \"] \"\n        ];\n        if (name) line.push(`${name} \\u{203A} `);\n        line.push(msg);\n        const args = line;\n        if (Object.keys(details).length) args.push(details);\n        // err should be last because it takes a lot of room and \"hides\" further args\n        if (err) args.push(err);\n        console_method(...args);\n    };\n}\n\n},{\"./common.js\":\"abC0y\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"fCxzd\"}],\"b6Dyh\":[function(require,module,exports) {\n// Note: the name of this file is because it appears in the dev tools!\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"improve_console_groups\", ()=>install);\nconst PATCHED_METHODS = [\n    \"debug\",\n    \"log\",\n    \"info\",\n    \"warn\",\n    \"error\",\n    \"group\",\n    \"groupCollapsed\",\n    \"groupEnd\",\n    \"table\",\n    \"trace\",\n    \"dir\",\n    \"dirxml\",\n    \"count\",\n    \"assert\"\n];\nconst DEBUG = false;\nfunction install({ uncollapse_level = \"warn\", lazy = true, original_console = console } = {}) {\n    if (DEBUG) console.log(\"better-console-groups install\", {\n        uncollapse_level,\n        lazy\n    });\n    const group_invocations = [];\n    // in node, group() calls console.log()\n    // to prevent infinite loops\n    let in_original_call = false;\n    const ORIGINAL_METHODS = {};\n    PATCHED_METHODS.forEach((k)=>{\n        ORIGINAL_METHODS[k] = original_console[k];\n    });\n    function better_group(...p) {\n        if (DEBUG) ORIGINAL_METHODS[\"log\"](\">>> before group\", {\n            lazy,\n            depth: group_invocations.length\n        }, `\"${p[0]}\"`);\n        group_invocations.push({\n            params: p,\n            is_deployed: true,\n            is_effective: !lazy\n        });\n        if (!lazy) {\n            in_original_call = true;\n            ORIGINAL_METHODS[\"group\"](...p);\n            in_original_call = false;\n        }\n        if (DEBUG) ORIGINAL_METHODS[\"log\"](\"<<< after group\", {\n            depth: group_invocations.length\n        });\n    }\n    function better_groupCollapsed(...p) {\n        if (DEBUG) ORIGINAL_METHODS[\"log\"](\">>> before groupCollapsed\", {\n            lazy,\n            depth: group_invocations.length\n        }, `\"${p[0]}\"`);\n        group_invocations.push({\n            params: p,\n            is_deployed: false,\n            is_effective: !lazy\n        });\n        if (!lazy) {\n            in_original_call = true;\n            ORIGINAL_METHODS[\"groupCollapsed\"](...p);\n            in_original_call = false;\n        }\n        if (DEBUG) ORIGINAL_METHODS[\"log\"](\"after groupCollapsed\", {\n            depth: group_invocations.length\n        });\n    }\n    function better_groupEnd(...p) {\n        if (DEBUG) ORIGINAL_METHODS[\"log\"](\">>> before groupEnd\", {\n            lazy,\n            depth: group_invocations.length\n        }, `\"${p[0]}\"`);\n        const last_invocation = group_invocations.pop();\n        if (last_invocation && last_invocation.is_effective) {\n            in_original_call = true;\n            ORIGINAL_METHODS[\"groupEnd\"](...p);\n            in_original_call = false;\n        }\n        if (DEBUG) ORIGINAL_METHODS[\"log\"](\"<<< after groupEnd\", {\n            lazy,\n            depth: group_invocations.length\n        });\n    }\n    function better_output(original_method, uncollapse, ...p) {\n        if (in_original_call) return original_method(...p);\n        if (DEBUG) original_method(\">>> before output\", {\n            depth: group_invocations.length\n        }, `\"${p[0]}\"`);\n        // lazily create groups\n        // cancel collapsed if needed\n        group_invocations.forEach((invocation)=>{\n            const { is_effective, is_deployed, params } = invocation;\n            if (is_effective) return;\n            if (DEBUG) original_method(\"--- lazy call\");\n            if (uncollapse || is_deployed) {\n                in_original_call = true;\n                ORIGINAL_METHODS[\"group\"](...params);\n                in_original_call = false;\n                invocation.is_deployed = true;\n            } else {\n                in_original_call = true;\n                ORIGINAL_METHODS[\"groupCollapsed\"](...params);\n                in_original_call = false;\n                invocation.is_deployed = false;\n            }\n            invocation.is_effective = true;\n        });\n        if (DEBUG) original_method(\"--- output\");\n        // uncollapse parents if needed\n        if (uncollapse) {\n            const lowest_uncollapsed_index = group_invocations.findIndex(({ is_deployed })=>!is_deployed);\n            while(lowest_uncollapsed_index >= 0 && group_invocations.length && group_invocations.length > lowest_uncollapsed_index){\n                better_groupEnd();\n                ORIGINAL_METHODS[\"debug\"](\"(forced break out of collapsed group \\u2191 due to critical log \\u2193)\");\n            }\n        }\n        if (DEBUG) original_method(\"--- output\");\n        original_method(...p);\n        if (DEBUG) original_method(\"<<<after output\", {\n            depth: group_invocations.length\n        });\n    }\n    const patched = new Set();\n    console.group = better_group;\n    patched.add(\"group\");\n    console.groupCollapsed = better_groupCollapsed;\n    patched.add(\"groupCollapsed\");\n    console.groupEnd = better_groupEnd;\n    patched.add(\"groupEnd\");\n    console.warn = better_output.bind(null, ORIGINAL_METHODS[\"warn\"], uncollapse_level === \"warn\");\n    patched.add(\"warn\");\n    console.error = better_output.bind(null, ORIGINAL_METHODS[\"error\"], true);\n    patched.add(\"error\");\n    console.assert = (assertion, ...args)=>{\n        if (assertion) ;\n        else better_output(ORIGINAL_METHODS[\"assert\"], true, assertion, ...args);\n    };\n    patched.add(\"assert\");\n    PATCHED_METHODS.forEach((method)=>{\n        if (patched.has(method)) return;\n        console[method] = better_output.bind(null, ORIGINAL_METHODS[method], false);\n        patched.add(method);\n    });\n}\nexports.default = install;\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"fCxzd\"}],\"2DyN2\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"LS_ROOT\", ()=>(0, _constsJs.LS_ROOT));\nparcelHelpers.export(exports, \"getOverrideKeyForLogger\", ()=>getOverrideKeyForLogger);\nparcelHelpers.export(exports, \"getLSKeyForOverride\", ()=>getLSKeyForOverride);\nvar _constsJs = require(\"../consts.js\");\nfunction getOverrideKeyForLogger(name) {\n    return `logger.${name || \"default\"}.logLevel`;\n}\nfunction getLSKeyForOverride(key) {\n    // should we put v1 somewhere? no, most likely overkill.\n    return `${0, _constsJs.LS_ROOT}.override.${key}`;\n}\n\n},{\"../consts.js\":\"5FYXS\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"fCxzd\"}],\"5FYXS\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"LS_ROOT\", ()=>LS_ROOT);\nconst LS_ROOT = \"\\uD83D\\uDEE0UDA\";\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"fCxzd\"}],\"4GFnz\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"LIB\", ()=>LIB);\nconst LIB = \"pwa-debugger\";\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"fCxzd\"}]},[], null, \"parcelRequire375b\")\n\n//# sourceMappingURL=logger.6e3b5e8d.js.map\n","import { getLogger } from '@offirmo/universal-debug-api-browser'\n\nimport { LIB } from '../consts.ts'\n\n/////////////////////////////////////////////////\n\nconst logger = getLogger({\n\tname: LIB,\n\t//suggestedLevel: 'error',\n\t//suggestedLevel: 'warn',\n\t//suggestedLevel: 'verbose',\n\tsuggestedLevel: 'silly',\n})\n\n/////////////////////////////////////////////////\n\nexport default logger\n","import { DebugApiRoot, DebugApi } from '@offirmo/universal-debug-api-interface'\n\nimport createV1, { OWN_LOGGER_NAME } from './v1/index.js'\n\n\n// ensure the root is present\nconst _p = '_debug'\n;(globalThis as any)[_p] ||= {}\n\nconst root: DebugApiRoot = (globalThis as any)[_p]\n\n//////////// v1 ////////////\n\n// TODO extract this common code!\n// install globally if no better implementation already present\nroot.v1 = ((existing) => {\n\tconst candidate = createV1()\n\tlet ownLogger = candidate.getLogger({name: OWN_LOGGER_NAME})\n\townLogger.debug('as a candidate, attempting to attach…')\n\n\tif (!existing) {\n\t\townLogger.debug('nominal install ✅')\n\t\treturn candidate // nominal case, this implementation is first\n\t}\n\t// something is wrong.\n\t// We CAN'T replace a non-placeholder existing one, even if we are more recent,\n\t// because the existing one may already have been called\n\t// and be having a state that can't be carried over.\n\t// HOWEVER some hints may help the user:\n\tlet isExistingAPlaceholder = !existing._ // we know that the placeholder doesn't define this optional prop\n\n\tif (isExistingAPlaceholder) {\n\t\townLogger.warn('install warning: a placeholder is already present, you may have missed some calls! the true implementation should be imported earlier! Check the order of your scripts/imports!')\n\t\t// better than nothing, may still miss some calls\n\t\townLogger.log('as a candidate, replacing existing ⚠')\n\t\treturn candidate\n\t}\n\n\townLogger = existing.getLogger({name: OWN_LOGGER_NAME})\n\townLogger.warn('install warning: several true implementation coexists, only the top module should import it. Check your submodules!')\n\t// note that this can happens if a bundler incorrectly duplicates the same module\n\n\ttry {\n\t\tconst minVersion = Math.min(existing._!.minor, candidate._!.minor)\n\t\tif (minVersion !== candidate._!.minor)\n\t\t\townLogger.warn(`install warning: several true implementation coexists, including an outdated one: \"v${minVersion}\"!`)\n\t} catch (err) {\n\t\townLogger.warn(err as any)\n\t}\n\n\townLogger.log('as a candidate, discarding myself: existing is good enough ✅')\n\treturn existing // don't replace\n})(root.v1)\n\n//////////// latest ////////////\n\n// directly expose the latest implementation known to this lib\nconst instance: DebugApi = root.v1\n\nconst {\n\tgetLogger,\n\texposeInternal,\n\toverrideHook,\n\taddDebugCommand,\n} = instance\n\nexport {\n\tgetLogger,\n\texposeInternal,\n\toverrideHook,\n\taddDebugCommand,\n\n\tcreateV1, // special cases\n}\n\n// types\nexport * from '@offirmo/universal-debug-api-interface'\n","import { DebugApiV1 } from '@offirmo/universal-debug-api-interface'\nimport {\n\tLogLevel,\n\tDEFAULT_LOG_LEVEL,\n\tDEFAULT_LOGGER_KEY,\n\tLogger,\n\tLoggerCreationParams,\n} from '@offirmo/practical-logger-core'\nimport {\n\tcreateLogger,\n} from '@offirmo/practical-logger-browser'\n\nimport { LS_ROOT, getOverrideKeyForLogger, getLSKeyForOverride } from './keys.js'\n\n\n////////////////////////////////////\n\ninterface OverrideStatus {\n\tisOn: boolean\n\tvalue: any\n}\n\ntype Overrides = Record<string, OverrideStatus>\n\n////////////////////////////////////\n\nexport const OWN_LOGGER_NAME = LS_ROOT\nconst REVISION = 100.\n\n////////////////////////////////////\n\nexport default function create(): DebugApiV1 {\n\t//console.trace('[UDA--browser installing…]')\n\n\t////////////////////////////////////\n\n\tconst loggers: { [name: string]: Logger } = {} // to avoid creating duplicates\n\tconst debugCommands: { [name: string]: () => void } = {} // TODO check\n\tconst exposed: any = {}\n\tconst overrides: Overrides = {} // we'll expose them for clarity\n\n\t////////////////////////////////////\n\n\t// TODO override?\n\t// TODO allow off?\n\tconst _ownLogger: Logger = loggers[OWN_LOGGER_NAME] = createLogger({\n\t\tname: OWN_LOGGER_NAME,\n\t\tsuggestedLevel: 'fatal', // level adjustable, see below\n\t})\n\n\tfunction _getOverrideRequestedSJson(ovKey: string): null | string {\n\t\ttry {\n\t\t\tconst LSKey = getLSKeyForOverride(ovKey)\n\t\t\t//console.log(`LSKey = \"${LSKey}\"`)\n\t\t\tconst rawValue = localStorage.getItem(LSKey)\n\t\t\t//console.log(`LSKey content = \"${value}\"`)\n\t\t\treturn rawValue\n\t\t}\n\t\tcatch (err) {\n\t\t\t_ownLogger.warn(`🔴 error reading LS for override \"${ovKey}\"!`, { err })\n\t\t\treturn null\n\t\t}\n\t}\n\n\tconst forcedLevel = _getOverrideRequestedSJson(getOverrideKeyForLogger('_UDA_internal'))\n\ttry {\n\t\tif (forcedLevel)\n\t\t\t_ownLogger.setLevel(JSON.parse(forcedLevel) as LogLevel)\n\t}\n\tcatch (err) {\n\t\t_ownLogger.fatal(`🔴 error setting internal logger forced level: \"${forcedLevel}\"!`)\n\t}\n\t_ownLogger.debug(`Instantiated. (revision: ${REVISION})`)\n\n\tfunction _getOverride(key: string): OverrideStatus {\n\t\tif (!overrides[key]) {\n\t\t\t// we only read the LS once for speed reason\n\t\t\toverrides[key] = {\n\t\t\t\t// so far:\n\t\t\t\tisOn: false,\n\t\t\t\tvalue: undefined,\n\t\t\t}\n\n\t\t\tconst rawValue = _getOverrideRequestedSJson(key)\n\t\t\tif (rawValue) {\n\t\t\t\ttry {\n\t\t\t\t\toverrides[key]!.isOn = true\n\t\t\t\t\t// we allow the non-JSON \"undefined\"\n\t\t\t\t\tconst value = rawValue === 'undefined' ? undefined : JSON.parse(rawValue)\n\t\t\t\t\toverrides[key]!.value = value\n\t\t\t\t\t_ownLogger.log(` 🔵 overriden \"${key}\"`, { value })\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// TODO only complain once\n\t\t\t\t\t// TODO seen crash, to check again\n\t\t\t\t\t_ownLogger.warn(`🔴 failed to override \"${key}\"!`, { badValue: rawValue, err })\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn overrides[key]!\n\t}\n\n\t////////////////////////////////////\n\n\tconst api: DebugApiV1 = {\n\t\tgetLogger,\n\t\texposeInternal,\n\t\toverrideHook,\n\t\taddDebugCommand,\n\n\t\t_: {\n\t\t\texposed,\n\t\t\toverrides,\n\t\t\tminor: REVISION,\n\t\t\tsource: 'browser-lib',\n\t\t\tcreate,\n\t\t},\n\t}\n\n\t////////////////////////////////////\n\n\tfunction overrideHook<T>(key: string, defaultValue: T): T {\n\t\ttry {\n\t\t\tconst status = _getOverride(key)\n\t\t\tif (status.isOn)\n\t\t\t\treturn status.value as T\n\t\t}\n\t\tcatch (err) {\n\t\t\t// should never happen because _getOverride() already catch\n\t\t\t// TODO check!\n\t\t\t_ownLogger.error('overrideHook(): error retrieving override!', { key, err })\n\t\t}\n\n\t\treturn defaultValue\n\t}\n\n\tfunction getLogger(p: Readonly<LoggerCreationParams> = {}): Logger {\n\t\tconst name = p.name || DEFAULT_LOGGER_KEY // we need a name immediately\n\n\t\tif (!loggers[name]) {\n\t\t\ttry {\n\t\t\t\tconst ovKey = getOverrideKeyForLogger(name)\n\t\t\t\tif (!p.forcedLevel && _getOverrideRequestedSJson(ovKey)) {\n\t\t\t\t\tp = {\n\t\t\t\t\t\t...p,\n\t\t\t\t\t\tforcedLevel: overrideHook(ovKey, p.suggestedLevel || DEFAULT_LOG_LEVEL),\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\t// this warning should appear only once on creation ✔\n\t\t\t\t_ownLogger.error('getLogger(): error overriding the level!', { name, err })\n\t\t\t}\n\n\t\t\tloggers[name] = createLogger(p)\n\t\t}\n\n\t\treturn loggers[name]!\n\t}\n\n\tfunction exposeInternal(path: string, value: any): void {\n\t\t_ownLogger.warn('exposeInternal(): alpha, not documented!')\n\t\ttry {\n\t\t\tconst pathParts = path.split('.') // TODO switch to / ?\n\t\t\tconst lastIndex = pathParts.length - 1\n\t\t\tlet root: any = exposed\n\t\t\tpathParts.forEach((p: string, index: number) => {\n\t\t\t\troot[p] = root[p] || (\n\t\t\t\t\tindex === lastIndex\n\t\t\t\t\t\t? value\n\t\t\t\t\t\t: {}\n\t\t\t\t)\n\t\t\t\troot = root[p]\n\t\t\t})\n\t\t}\n\t\tcatch (err) {\n\t\t\t_ownLogger.error('exposeInternal(): error exposing!', { path, err })\n\t\t}\n\t}\n\n\tfunction addDebugCommand(commandName: string, callback: () => void) {\n\t\t// TODO\n\t\t_ownLogger.warn('addDebugCommand(): alpha, not documented!')\n\t\t// TODO try catch\n\t\tdebugCommands[commandName] = callback\n\t}\n\n\treturn api\n}\n","import { create as createLogger } from './core.js'\nexport { createLogger }\n\nexport * from '@offirmo/practical-logger-types'\n\nexport {\n\tALL_LOG_LEVELS,\n\tLOG_LEVEL_TO_INTEGER,\n\tLOG_LEVEL_TO_HUMAN,\n\tDEFAULT_LOG_LEVEL,\n\tDEFAULT_LOGGER_KEY,\n} from './consts.js'\n\nexport { checkLevel } from './core.js'\nexport * from './normalize-args.js'\n","import {\n\tLogLevel,\n\tBaseInternalLoggerState,\n\tLogger,\n\tLoggerCreationParams,\n\tLogDetails,\n\tLogPayload,\n\tLogPrimitive,\n\tLogSink,\n} from '@offirmo/practical-logger-types'\n\nimport {\n\tLIB,\n\tALL_LOG_LEVELS,\n\tLOG_LEVEL_TO_INTEGER,\n\tDEFAULT_LOG_LEVEL,\n\tDEFAULT_LOGGER_KEY,\n} from './consts.js'\n\nimport { normalizeArguments } from './normalize-args.js'\n\n\nexport function checkLevel(level: any): asserts level is LogLevel {\n\tif (!ALL_LOG_LEVELS.includes(level))\n\t\tthrow new Error(`[${LIB}] Not a valid log level: \"${level}\"!`)\n}\n\nexport function create(\n\t{\n\t\tname = DEFAULT_LOGGER_KEY,\n\t\tsuggestedLevel = DEFAULT_LOG_LEVEL,\n\t\tforcedLevel,\n\t\tcommonDetails = {},\n\t}: LoggerCreationParams = {},\n\toutputFn: LogSink = console.log,\n): Logger {\n\n\tconst internalState: BaseInternalLoggerState = {\n\t\tname,\n\t\tlevel: forcedLevel || suggestedLevel,\n\t\tcommonDetails: {...commonDetails},\n\t\toutputFn,\n\t}\n\n\tlet levelAsInt = 100 // so far\n\n\tconst logger: Logger = ALL_LOG_LEVELS.reduce(\n\t\t(logger: any, level: LogLevel) => {\n\t\t\tconst primitive: LogPrimitive = function (rawMessage?: string, rawDetails?: LogDetails) {\n\t\t\t\tif (!isLevelEnabled(level)) return\n\n\t\t\t\tconst [ message, details ] = normalizeArguments(arguments)\n\n\t\t\t\tinternalState.outputFn(serializer(level, message, details))\n\t\t\t}\n\n\t\t\tlogger[level] = primitive\n\n\t\t\treturn logger\n\t\t},\n\t\t{\n\t\t\tsetLevel,\n\t\t\tgetLevel,\n\t\t\taddCommonDetails,\n\t\t\tgroup() {},\n\t\t\tgroupCollapsed() {},\n\t\t\tgroupEnd() {},\n\t\t},\n\t)\n\n\tfunction setLevel(level: LogLevel) {\n\t\tcheckLevel(level)\n\n\t\tinternalState.level = level\n\t\tlevelAsInt = LOG_LEVEL_TO_INTEGER[level]!\n\t}\n\tsetLevel(getLevel()) // to check it\n\n\tfunction isLevelEnabled(level: LogLevel) {\n\t\tcheckLevel(level)\n\n\t\treturn LOG_LEVEL_TO_INTEGER[level]! <= levelAsInt\n\t}\n\n\tfunction getLevel() {\n\t\treturn internalState.level\n\t}\n\n\tfunction addCommonDetails(details: Readonly<LogDetails>): void {\n\t\tif (details['err'])\n\t\t\tthrow new Error(`[${LIB}] Can't set reserved property \"err\"!`)\n\n\t\tinternalState.commonDetails = {\n\t\t\t...internalState.commonDetails,\n\t\t\t...details,\n\t\t}\n\t}\n\n\tfunction serializer(level: LogLevel, msg: string, { err, ...details }: Readonly<LogDetails>): LogPayload {\n\t\tconst payload: LogPayload = {\n\t\t\tlevel,\n\t\t\tname,\n\t\t\tmsg,\n\t\t\ttime: +(new Date()), // UTC timestamp\n\t\t\tdetails: {\n\t\t\t\t...internalState.commonDetails,\n\t\t\t\t...details,\n\t\t\t},\n\t\t}\n\t\tif (err)\n\t\t\tpayload.err = err\n\n\t\treturn payload\n\t}\n\n\treturn logger\n}\n","import { LogLevel } from '@offirmo/practical-logger-types'\n\nexport const LIB = '@offirmo/practical-logger-core'\n\n// level to a numerical value, for ordering and filtering.\n// mnemonic:  100 = 100% = you will see 100% of the logs\n//              1 =   1% = you will see 1% of the logs (obviously the most important)\nexport const LOG_LEVEL_TO_INTEGER: Readonly<{ readonly [k: string]: number }> = {\n\tfatal:    1,\n\temerg:    2,\n\n\talert:   10,\n\tcrit:    20,\n\terror:   30,\n\n\twarning: 40,\n\twarn:    40,\n\n\tnotice:  45,\n\n\tinfo:    50,\n\n\tverbose: 70,\n\tlog:     80,\n\tdebug:   81,\n\n\ttrace:   90,\n\n\tsilly:  100,\n}\n\nexport const ALL_LOG_LEVELS: ReadonlyArray<LogLevel> =\n\t(Object.keys(LOG_LEVEL_TO_INTEGER) as LogLevel[])\n\t\t.sort((a: LogLevel, b: LogLevel) => LOG_LEVEL_TO_INTEGER[a]! - LOG_LEVEL_TO_INTEGER[b]!)\n\n// rationalization to a clear, human understandable string\n// generated to shave a few bytes\n// not using fromEntries bc not available in node <12\nexport const LOG_LEVEL_TO_HUMAN: Readonly<{ readonly [k: string]: string }> = ALL_LOG_LEVELS.reduce((acc, ll) => {\n\tacc[ll] = ({ em: 'emergency', wa: 'warn'} as any)[ll.slice(0, 1)] || ll\n\treturn acc\n}, {} as any)\n\nexport * from './consts-base.js'\n","// base to be directly importable from other modules\n// without a full lib penalty.\n// This a very very specific use case, don't mind.\n\nimport { LogLevel } from '@offirmo/practical-logger-types'\n\nexport const DEFAULT_LOG_LEVEL: LogLevel = 'error'\nexport const DEFAULT_LOGGER_KEY = '' // yes, can be used as a key\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","import {\n\tLogDetails,\n} from '@offirmo/practical-logger-types'\n\n\n// TODO externalize?\nexport function looksLikeAnError(x: any): boolean {\n\treturn !!(x?.name && x?.message && x?.stack)\n}\n\n// harmonize\n// also try to recover from incorrect invocations\nexport function normalizeArguments(raw_args: IArguments | any[]): [ string, LogDetails ] {\n\tconst message_parts: string[] = []\n\tlet details: LogDetails = {}\n\tlet err: Error | undefined = undefined\n\n\tArray.from(raw_args)\n\t\t.forEach(arg => {\n\t\t\tif (!arg)\n\t\t\t\treturn\n\n\t\t\t// errors are first class, look for them first\n\t\t\tif (looksLikeAnError(arg)) {\n\t\t\t\tif (!err)\n\t\t\t\t\terr = arg // extract it\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif (!err && looksLikeAnError(arg.err)) {\n\t\t\t\terr = arg.err // extract it\n\t\t\t\t// don't return, still stuff to pick\n\t\t\t}\n\n\t\t\tif (typeof arg === 'object') {\n\t\t\t\tdetails = {\n\t\t\t\t\t...details,\n\t\t\t\t\t...arg,\n\t\t\t\t}\n\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tmessage_parts.push(String(arg))\n\t\t})\n\n\tif (typeof details['message'] === 'string' && !message_parts.length) {\n\t\tmessage_parts.push(details['message'])\n\t\tdelete details['message']\n\t}\n\n\tconst message = message_parts.join(' ') || (err as any)?.message || '(no message)'\n\tif (err)\n\t\tdetails['err'] = err\n\telse\n\t\tdelete details['err'] // because could be present but not be a correct err type\n\n\treturn [ message, details ]\n}\n","\n//////////// Public interface (for logger usage) ////////////\n\n// List of all known logging primitives, in order of criticity\n// https://docs.google.com/spreadsheets/d/1Bc32plQTswNdCqXS99deB0n7Te7FfD7uepGAOOlPbvY/edit?usp=sharing\nexport type LogLevel =\n\t// TODO an extra \"never\" level?\n\t  'fatal'\n\t| 'emerg'\n\t| 'alert'\n\t| 'crit'\n\t| 'error'\n\t| 'warning'\n\t| 'warn'\n\t| 'notice'\n\t| 'info'\n\t| 'verbose'\n\t| 'log'\n\t| 'debug'\n\t| 'trace'\n\t| 'silly'\n\nexport interface LogDetails { [k: string]: any }\n\n// We INTENTIONALLY restrict to a structured primitive with no overloading.\n// - we do NOT follow bunyan with its multiple overloads (https://github.com/trentm/node-bunyan#log-method-api)\n//   Rationale: multiple overloads prove hard to type and force to use complex normalization code.\n// - we do not attempt to mirror console.x() API:\n//   it's not relevant since the introduction of string templates literals.\n// Still, we MAY tolerate a few simplifying cases:\n// - omitting the message: it will be extracted from details.message\n// - passing an error directly, either as the only arg or as details\n//   (to allow the simple logging of an error)\n// Those \"tolerances\" are non-standard and may not be handled!\nexport type LogPrimitive = (message?: string, details?: Readonly<LogDetails>) => void\n\n// The top-level interface\nexport interface Logger {\n\tsetLevel: (level: LogLevel) => void\n\tgetLevel: () => LogLevel\n\taddCommonDetails: (hash: Readonly<LogDetails>) => void\n\n\tfatal: LogPrimitive\n\temerg: LogPrimitive\n\talert: LogPrimitive\n\tcrit: LogPrimitive\n\terror: LogPrimitive\n\twarning: LogPrimitive\n\twarn: LogPrimitive\n\tnotice: LogPrimitive\n\tinfo: LogPrimitive\n\tverbose: LogPrimitive\n\tlog: LogPrimitive\n\tdebug: LogPrimitive\n\ttrace: LogPrimitive\n\tsilly: LogPrimitive\n\n\t// for convenience. Not guaranteed to do anything.\n\tgroup(groupTitle?: string): void\n\tgroupCollapsed(groupTitle?: string): void\n\tgroupEnd(): void\n}\n\n//////////// Private interface (for logger implementations) ////////////\n\n// internal representation of a log line\n// inspired by:\n// https://github.com/trentm/node-bunyan#core-fields\nexport interface LogPayload {\n\tname: string // logger name\n\n\ttime: number // UTC timestamp\n\tlevel: LogLevel\n\tmsg: string\n\terr?: Error\n\tdetails: LogDetails\n}\n\n// a function responsible to display a log line (or whatever)\nexport type LogSink = (payload: LogPayload) => void\n\n// a suggested base logger state\nexport interface BaseInternalLoggerState {\n\tname: string\n\tlevel: LogLevel // inclusive lower bound\n\tcommonDetails: LogDetails\n\toutputFn: LogSink\n}\n\n// suggested creation params\nexport interface BaseSinkOptions {\n\tsink?: LogSink\n}\nexport interface LoggerCreationParams<SinkOptions extends BaseSinkOptions = {}> {\n\tname?: string\n\tsuggestedLevel?: LogLevel // the code is free to suggest a default level, but can expect it to be dynamically overriden (see Universal Debug API)\n\tforcedLevel?: LogLevel // use only if you provide your own mechanism for dynamically setting the level\n\tcommonDetails?: Readonly<LogDetails>\n\tsinkOptions?: SinkOptions // options specifically targeted at the sink, usually platform dependent\n}\n","\nimport tiny_singleton from '@offirmo/tiny-singleton'\nimport { LogSink, Logger, LoggerCreationParams } from '@offirmo/practical-logger-types'\nimport { createLogger as createLoggerCore } from '@offirmo/practical-logger-core'\n\nimport { SinkOptions } from './types.js'\nimport { create } from './sinks/index.js'\nimport improve_console_groups from './better-console-groups/practical-logger.js'\n\n/////////////////////////////////////////////////\n\nconst ORIGINAL_CONSOLE = console\n\n/////////////////////////////////////////////////\n\nconst _request_install_better_console_groups_if_not_already = tiny_singleton((active: boolean = true) => { if (active) improve_console_groups() })\n\nfunction createLogger(p: Readonly<LoggerCreationParams<SinkOptions>> = {}): Logger {\n\t_request_install_better_console_groups_if_not_already(p.sinkOptions?.betterGroups !== false)\n\n\tconst sink: LogSink = p.sinkOptions?.sink || create(p.sinkOptions)\n\n\tconst { group, groupCollapsed, groupEnd } = ORIGINAL_CONSOLE\n\treturn {\n\t\t...createLoggerCore(p, sink),\n\t\tgroup,\n\t\tgroupCollapsed,\n\t\tgroupEnd,\n\t}\n}\n\n/////////////////////////////////////////////////\n\nexport {\n\t_request_install_better_console_groups_if_not_already,\n\tcreateLogger,\n}\nexport * from '@offirmo/practical-logger-types'\nexport { DEFAULT_LOG_LEVEL, DEFAULT_LOGGER_KEY } from '@offirmo/practical-logger-core'\n","/////////////////////////////////////////////////\n\nexport default function tiny_singleton<\n\tCreateFn extends (...args: any[]) => ReturnType<CreateFn>\n>(generator: CreateFn): (...args: Parameters<CreateFn>) => ReturnType<CreateFn> {\n\tlet instantiated = false\n\tlet instance: undefined | ReturnType<CreateFn>\n\n\treturn function get(...args: any) {\n\t\tif (!instantiated) {\n\t\t\tinstance = generator(...args)\n\t\t\tinstantiated = true\n\t\t}\n\n\t\treturn instance as ReturnType<CreateFn>\n\t}\n}\n\n/////////////////////////////////////////////////\n\nexport {\n\ttiny_singleton,\n}\n","import { LogSink } from '@offirmo/practical-logger-types'\n\nimport { Browser, SinkOptions } from '../types.js'\nimport sink_firefox from './advanced/firefox.js'\nimport sink_chromium from './advanced/chromium.js'\nimport sink_safari from './advanced/safari.js'\nimport create_sink_no_css from './no-css.js'\n\n// TODO export that?\nfunction quick_detect_browser(): Browser {\n\t// https://stackoverflow.com/a/9851769/587407\n\t// https://dev.to/_elmahdim/safe-reliable-browser-sniffing-39bp\n\n\ttry {\n\t\tif ((window as any).InstallTrigger)\n\t\t\treturn 'firefox'\n\n\t\tif ((window as any).ApplePaySession)\n\t\t\treturn 'safari'\n\n\t\tif ((window as any).chrome)\n\t\t\treturn 'chromium'\n\t}\n\tcatch {\n\t\t/* ignore */\n\t}\n\n\treturn 'other'\n}\n\n\nexport function create(options: Readonly<SinkOptions> = {}): LogSink {\n\tif (options.useCss === false)\n\t\treturn create_sink_no_css(options)\n\n\tswitch(options.explicitBrowser || quick_detect_browser()) {\n\t\tcase 'firefox':\n\t\t\treturn sink_firefox\n\t\tcase 'safari':\n\t\t\treturn sink_safari\n\t\tcase 'chromium':\n\t\t\treturn sink_chromium\n\t\tdefault:\n\t\t\treturn create_sink_no_css(options)\n\t}\n}\n","import {\n\tLogPayload,\n\tLogSink,\n} from '@offirmo/practical-logger-types'\n\nimport {\n\tLEVEL_TO_CONSOLE_METHOD,\n\tto_uniform_level,\n} from '../common.js'\nimport {\n\tFONT_FAMILY_BETTER_PROPORTIONAL,\n\tFONT_FAMILY_BETTER_MONOSPACE,\n\tLEVEL_TO_COLOR_STYLE,\n\tadd_styled_string,\n\tbuild_args,\n} from './common.js'\n\n\nfunction has_details_indicator(console_method_name: string): boolean {\n\treturn console_method_name === 'error'\n}\n\nconst HEADER_FONT_SIZE_STYLE = 'font-size: 10px'\nexport const sink: LogSink = (payload: Readonly<LogPayload>): void => {\n\tconst { level, name, msg } = payload\n\tconst console_method_name: string = LEVEL_TO_CONSOLE_METHOD[level]\n\tconst console_method: Console['log'] = (console as any)[console_method_name]\n\n\tlet line = ['']\n\n\tif (!has_details_indicator(console_method_name)) {\n\t\tline = add_styled_string(line, '▷', LEVEL_TO_COLOR_STYLE[level], 'font-size: 8px', FONT_FAMILY_BETTER_PROPORTIONAL, 'margin-left: .35em', 'margin-right: .5em')\n\t}\n\tline = add_styled_string(line, '[', LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_PROPORTIONAL)\n\tline = add_styled_string(line, to_uniform_level(level), LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_MONOSPACE)\n\tline = add_styled_string(line, '] ', LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_PROPORTIONAL)\n\tline = add_styled_string(line, '', 'font-size: unset')\n\n\tif (name) {\n\t\tline = add_styled_string(line, `${name} › `, LEVEL_TO_COLOR_STYLE[level], FONT_FAMILY_BETTER_PROPORTIONAL)\n\t}\n\tline = add_styled_string(line, msg, LEVEL_TO_COLOR_STYLE[level], FONT_FAMILY_BETTER_PROPORTIONAL)\n\n\tconsole_method(...build_args(line, payload))\n}\n\nexport default sink\n","import { LogLevel, LOG_LEVEL_TO_HUMAN } from '@offirmo/practical-logger-core'\n\nexport const LEVEL_TO_CONSOLE_METHOD: Readonly<{ [k: string]: string }> = {\n\tfatal:   'error',\n\temerg:   'error',\n\talert:   'error',\n\tcrit:    'error',\n\n\terror:   'error',\n\n\twarning: 'warn',\n\twarn:    'warn',\n\n\tnotice:  'info',\n\tinfo:    'info',\n\tverbose: 'info',\n\n\tlog:     'log',\n\n\t// REMINDER\n\t// console.debug() needs to be ENABLED in the dev tools to be visible!\n\tdebug:   'debug',\n\ttrace:   'debug', // console.trace is NOT an output, do NOT use it\n\tsilly:   'debug',\n}\n\n\nconst MIN_WIDTH = 5\nexport function to_uniform_level(level: LogLevel): string {\n\tlet str = LOG_LEVEL_TO_HUMAN[level] //.slice(0, MIN_WIDTH)\n\t//if (str.length < MIN_WIDTH)\n\tstr = (str + '         ').slice(0, MIN_WIDTH)\n\treturn str\n}\n","import {\n\tLogPayload,\n} from '@offirmo/practical-logger-types'\n\n\nconst FONT_FAMILY_BETTER_PROPORTIONAL = 'font-family: ' + [\n\t'-apple-system',\n\t'BlinkMacSystemFont', // good sans-serif available in blink = Chrome\n\t'noto',\n\t'roboto',\n\t'sans-serif',\n\t//'unset', // default back to the devtools one\n].join(', ')\n\nconst FONT_FAMILY_BETTER_MONOSPACE = 'font-family: ' + [\n\t'\"Fira Code\"',\n\t'Menlo', // default chrome devtools one\n\t'Consolas',\n\t'monospace',\n].join(', ')\n\n\nconst LEVEL_TO_COLOR_STYLE: Readonly<{ [k: string]: string }> = {\n\t// empty = no need, console method already covers it well\n\tfatal:   '',\n\temerg:   '',\n\talert:   '',\n\tcrit:    '',\n\n\terror:   '',\n\n\twarning: '',\n\twarn:    '',\n\n\tnotice:  'color: #659AD2',\n\tinfo:    'color: #659AD2',\n\tverbose: 'color: #659AD2',\n\n\tlog:     '',\n\n\tdebug:   'color: #9AA2AA',\n\ttrace:   'color: #9AA2AA',\n\tsilly:   'color: #9AA2AA',\n}\n\n\nfunction add_styled_string(line: string[], chunk: string, ...styles: string[]): string[] {\n\tconst [ existing_chunks, ...existing_chunks_styles ] = line\n\treturn [\n\t\texisting_chunks + '%c' + chunk,\n\t\t...existing_chunks_styles,\n\t\tstyles.join(';') + ';',\n\t]\n}\n\nfunction build_args(line: any[], payload: Readonly<LogPayload>): any[] {\n\tconst { err } = payload\n\tlet { details } = payload\n\n\tconst args = line\n\tif (err) {\n\t\t// err will be passed as the LAST arg for reasons (see below)\n\t\t// however the \"last arg\" display doesn't allow examining the optional err properties\n\t\t// so we also add the err to the details:\n\t\t// (tested on FF/Chrome/Safari)\n\t\tdetails = {\n\t\t\t...details,\n\t\t\terr,\n\t\t}\n\t}\n\n\tif (Object.keys(details).length)\n\t\targs.push(details)\n\n\t// err *as an arg* triggers a good display of the stacktrace\n\t// however it should be LAST because it takes a lot of room and \"hides\" further args\n\t// (tested on FF/Chrome/Safari)\n\tif (err)\n\t\targs.push(err)\n\n\treturn args\n}\n\nexport {\n\tFONT_FAMILY_BETTER_PROPORTIONAL,\n\tFONT_FAMILY_BETTER_MONOSPACE,\n\tLEVEL_TO_COLOR_STYLE,\n\tadd_styled_string,\n\tbuild_args,\n}\n","import {\n\tLogPayload,\n\tLogSink,\n} from '@offirmo/practical-logger-types'\n\nimport {\n\tLEVEL_TO_CONSOLE_METHOD,\n\tto_uniform_level,\n} from '../common.js'\nimport {\n\tFONT_FAMILY_BETTER_PROPORTIONAL,\n\tFONT_FAMILY_BETTER_MONOSPACE,\n\tLEVEL_TO_COLOR_STYLE,\n\tadd_styled_string,\n\tbuild_args,\n} from './common.js'\n\n\nfunction has_details_indicator(console_method_name: string): boolean {\n\treturn console_method_name === 'error' || console_method_name === 'warn'\n}\n\nconst HEADER_FONT_SIZE_STYLE = 'font-size: 8px'\nconst MESSAGE_FONT_SIZE_STYLE = 'font-size: 11px'\n\nexport const sink: LogSink = (payload: Readonly<LogPayload>): void => {\n\tconst { level, name, msg } = payload\n\tconst console_method_name: string = LEVEL_TO_CONSOLE_METHOD[level]\n\tconst console_method: Console['log'] = (console as any)[console_method_name]\n\n\tlet line = ['']\n\n\tif (!has_details_indicator(console_method_name)) {\n\t\tline = add_styled_string(line, '▷', LEVEL_TO_COLOR_STYLE[level], 'font-size: 8px', FONT_FAMILY_BETTER_PROPORTIONAL, 'margin-left: .1em', 'margin-right: .2em')\n\t}\n\tline = add_styled_string(line, '[', LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_PROPORTIONAL)\n\tline = add_styled_string(line, to_uniform_level(level), LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_MONOSPACE)\n\tline = add_styled_string(line, '] ', LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_PROPORTIONAL)\n\tline = add_styled_string(line, '', 'font-size: unset')\n\n\tif (name) {\n\t\tline = add_styled_string(line, `${name} › `, LEVEL_TO_COLOR_STYLE[level], FONT_FAMILY_BETTER_PROPORTIONAL, MESSAGE_FONT_SIZE_STYLE)\n\t}\n\tline = add_styled_string(line, msg, LEVEL_TO_COLOR_STYLE[level], FONT_FAMILY_BETTER_PROPORTIONAL, MESSAGE_FONT_SIZE_STYLE)\n\n\tconsole_method(...build_args(line, payload))\n}\n\nexport default sink\n","import {\n\tLogPayload,\n\tLogSink,\n} from '@offirmo/practical-logger-types'\n\nimport {\n\tLEVEL_TO_CONSOLE_METHOD,\n\tto_uniform_level,\n} from '../common.js'\nimport {\n\tFONT_FAMILY_BETTER_PROPORTIONAL,\n\tFONT_FAMILY_BETTER_MONOSPACE,\n\tLEVEL_TO_COLOR_STYLE,\n\tadd_styled_string,\n\tbuild_args,\n} from './common.js'\n\n\nfunction has_details_indicator(console_method_name: string, details: any): boolean {\n\treturn details || console_method_name === 'error'\n}\n\nconst HEADER_FONT_SIZE_STYLE = 'font-size: 9px'\nexport const sink: LogSink = (payload: Readonly<LogPayload>): void => {\n\tconst { level, name, msg, details } = payload\n\tconst console_method_name: string = LEVEL_TO_CONSOLE_METHOD[level]\n\tconst console_method: Console['log'] = (console as any)[console_method_name]\n\n\tlet line = ['']\n\n\tif (!has_details_indicator(console_method_name, details)) {\n\t\tline = add_styled_string(line, '▷', LEVEL_TO_COLOR_STYLE[level], 'font-size: 10px', FONT_FAMILY_BETTER_PROPORTIONAL, 'margin-left: .15em', 'margin-right: .4em')\n\t}\n\tline = add_styled_string(line, '[', LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_PROPORTIONAL)\n\tline = add_styled_string(line, to_uniform_level(level), LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_MONOSPACE)\n\tline = add_styled_string(line, '] ', LEVEL_TO_COLOR_STYLE[level], HEADER_FONT_SIZE_STYLE, FONT_FAMILY_BETTER_PROPORTIONAL)\n\tline = add_styled_string(line, '', 'font-size: unset')\n\n\tif (name) {\n\t\tline = add_styled_string(line, `${name} › `, LEVEL_TO_COLOR_STYLE[level], FONT_FAMILY_BETTER_PROPORTIONAL)\n\t}\n\tline = add_styled_string(line, msg, LEVEL_TO_COLOR_STYLE[level], FONT_FAMILY_BETTER_PROPORTIONAL)\n\n\tconsole_method(...build_args(line, payload))\n}\n\nexport default sink\n","import {\n\tLogPayload,\n\tLogSink,\n} from '@offirmo/practical-logger-types'\n\nimport { SinkOptions } from '../types.js'\nimport { LEVEL_TO_CONSOLE_METHOD, to_uniform_level } from './common.js'\n\n\nexport default function create(options: Readonly<SinkOptions> = {}): LogSink {\n\treturn (payload: LogPayload): void => {\n\t\tconst { level, name, msg, err, details } = payload\n\t\tconst console_method_name: string = LEVEL_TO_CONSOLE_METHOD[level]\n\t\tconst console_method: Console['log'] = (console as any)[console_method_name]\n\n\t\tconst line = ['[', to_uniform_level(level), '] ']\n\n\t\tif (name) {\n\t\t\tline.push(`${name} › `)\n\t\t}\n\t\tline.push(msg)\n\n\t\tconst args: any[] = line\n\t\tif (Object.keys(details).length)\n\t\t\targs.push(details)\n\t\t// err should be last because it takes a lot of room and \"hides\" further args\n\t\tif (err)\n\t\t\targs.push(err)\n\n\t\tconsole_method(...args)\n\t}\n}\n","// Note: the name of this file is because it appears in the dev tools!\n\nconst PATCHED_METHODS: Array<keyof Console> = [\n\t'debug', 'log', 'info', 'warn', 'error',\n\n\t'group', 'groupCollapsed', 'groupEnd',\n\n\t'table', 'trace', 'dir', 'dirxml', 'count',\n\n\t'assert',\n]\n\n/*\n\ngroup: ƒ group()\ngroupCollapsed: ƒ groupCollapsed()\ngroupEnd: ƒ groupEnd()\n\ndebug: ƒ debug()\nlog: ƒ log()\ninfo: ƒ info()\nwarn: ƒ warn()\nerror: ƒ error()\n\ntable: ƒ table()\ntrace: ƒ trace()\ndir: ƒ dir()\ndirxml: ƒ dirxml()\ncount: ƒ count()\n\n// tricky, need extra work\nclear: ƒ clear()\nassert: ƒ assert()\n\n// doesn't display anything:\ncountReset: ƒ countReset()\ntimeStamp: ƒ timeStamp()\n\n// accessors\ncontext: ƒ context()\nmemory: (...)\n\n// to sort\nprofile: ƒ profile()\nprofileEnd: ƒ profileEnd()\ntime: ƒ time()\ntimeEnd: ƒ timeEnd()\ntimeLog: ƒ timeLog()\n */\n\ninterface GroupInvocation {\n\tparams: any[]\n\tis_deployed: boolean\n\tis_effective: boolean\n}\n\ninterface Options {\n\tuncollapse_level?: 'warn' | 'error',\n\tlazy?: boolean\n\toriginal_console?: Console,\n}\n\nconst DEBUG = false\n\nfunction install({ uncollapse_level = 'warn', lazy = true, original_console = console }: Options = {}): void {\n\tif (DEBUG) console.log('better-console-groups install', { uncollapse_level, lazy })\n\n\tconst group_invocations: GroupInvocation[] = []\n\t// in node, group() calls console.log()\n\t// to prevent infinite loops\n\tlet in_original_call = false\n\n\tconst ORIGINAL_METHODS: { [k: string]: (...p: any[]) => void } = {}\n\tPATCHED_METHODS.forEach(k => {\n\t\tORIGINAL_METHODS[k] = (original_console as any)[k]\n\t})\n\n\tfunction better_group(...p: any[]): void {\n\t\tif (DEBUG) ORIGINAL_METHODS['log']('>>> before group', { lazy, depth: group_invocations.length}, `\"${p[0]}\"`)\n\n\t\tgroup_invocations.push({\n\t\t\tparams: p,\n\t\t\tis_deployed: true,\n\t\t\tis_effective: !lazy,\n\t\t})\n\t\tif (!lazy) {\n\t\t\tin_original_call = true\n\t\t\tORIGINAL_METHODS['group'](...p)\n\t\t\tin_original_call = false\n\t\t}\n\n\t\tif (DEBUG) ORIGINAL_METHODS['log']('<<< after group', { depth: group_invocations.length})\n\t}\n\tfunction better_groupCollapsed(...p: any[]): void {\n\t\tif (DEBUG) ORIGINAL_METHODS['log']('>>> before groupCollapsed', { lazy, depth: group_invocations.length}, `\"${p[0]}\"`)\n\n\t\tgroup_invocations.push({\n\t\t\tparams: p,\n\t\t\tis_deployed: false,\n\t\t\tis_effective: !lazy,\n\t\t})\n\t\tif (!lazy) {\n\t\t\tin_original_call = true\n\t\t\tORIGINAL_METHODS['groupCollapsed'](...p)\n\t\t\tin_original_call = false\n\t\t}\n\n\t\tif (DEBUG) ORIGINAL_METHODS['log']('after groupCollapsed', { depth: group_invocations.length})\n\t}\n\tfunction better_groupEnd(...p: any[]): void {\n\t\tif (DEBUG) ORIGINAL_METHODS['log']('>>> before groupEnd', { lazy, depth: group_invocations.length}, `\"${p[0]}\"`)\n\n\t\tconst last_invocation = group_invocations.pop()\n\t\tif (last_invocation&& last_invocation.is_effective) {\n\t\t\tin_original_call = true\n\t\t\tORIGINAL_METHODS['groupEnd'](...p)\n\t\t\tin_original_call = false\n\t\t}\n\n\t\tif (DEBUG) ORIGINAL_METHODS['log']('<<< after groupEnd', { lazy, depth: group_invocations.length})\n\t}\n\n\tfunction better_output(original_method: Console['log'], uncollapse: boolean, ...p: any[]): void {\n\t\tif (in_original_call) {\n\t\t\treturn original_method(...p)\n\t\t}\n\t\tif (DEBUG) original_method('>>> before output', { depth: group_invocations.length}, `\"${p[0]}\"`)\n\n\t\t// lazily create groups\n\t\t// cancel collapsed if needed\n\t\tgroup_invocations.forEach(invocation => {\n\t\t\tconst { is_effective, is_deployed, params } = invocation\n\t\t\tif (is_effective) return\n\n\t\t\tif (DEBUG) original_method('--- lazy call')\n\n\t\t\tif (uncollapse || is_deployed) {\n\t\t\t\tin_original_call = true\n\t\t\t\tORIGINAL_METHODS['group'](...params)\n\t\t\t\tin_original_call = false\n\t\t\t\tinvocation.is_deployed = true\n\t\t\t}\n\t\t\telse {\n\t\t\t\tin_original_call = true\n\t\t\t\tORIGINAL_METHODS['groupCollapsed'](...params)\n\t\t\t\tin_original_call = false\n\t\t\t\tinvocation.is_deployed = false\n\t\t\t}\n\t\t\tinvocation.is_effective = true\n\t\t})\n\n\t\tif (DEBUG) original_method('--- output')\n\n\t\t// uncollapse parents if needed\n\t\tif (uncollapse) {\n\t\t\tconst lowest_uncollapsed_index = group_invocations.findIndex(\n\t\t\t\t({ is_deployed }) => !is_deployed,\n\t\t\t)\n\t\t\twhile (\n\t\t\t\tlowest_uncollapsed_index >= 0\n\t\t\t\t&& group_invocations.length\n\t\t\t\t&& group_invocations.length > lowest_uncollapsed_index\n\t\t\t) {\n\t\t\t\tbetter_groupEnd()\n\t\t\t\tORIGINAL_METHODS['debug']('(forced break out of collapsed group ↑ due to critical log ↓)')\n\t\t\t}\n\t\t}\n\n\t\tif (DEBUG) original_method('--- output')\n\n\t\toriginal_method(...p)\n\t\tif (DEBUG) original_method('<<<after output', { depth: group_invocations.length})\n\t}\n\n\tconst patched = new Set<keyof Console>()\n\n\tconsole.group = better_group\n\tpatched.add('group')\n\tconsole.groupCollapsed = better_groupCollapsed\n\tpatched.add('groupCollapsed')\n\tconsole.groupEnd = better_groupEnd\n\tpatched.add('groupEnd')\n\n\tconsole.warn = better_output.bind(null, ORIGINAL_METHODS['warn'], uncollapse_level === 'warn')\n\tpatched.add('warn')\n\tconsole.error = better_output.bind(null, ORIGINAL_METHODS['error'], true)\n\tpatched.add('error')\n\tconsole.assert = (assertion: boolean, ...args: any[]) => {\n\t\tif (assertion) {\n\t\t\t// do nothing\n\t\t}\n\t\telse {\n\t\t\tbetter_output(ORIGINAL_METHODS['assert'], true, assertion, ...args)\n\t\t}\n\t}\n\tpatched.add('assert')\n\n\tPATCHED_METHODS.forEach(method => {\n\t\tif (patched.has(method)) return\n\n\t\t;(console as any as { [k: string]: Console['log'] })[method] = better_output.bind(null, ORIGINAL_METHODS[method], false)\n\t\tpatched.add(method)\n\t})\n}\n\nexport { install as improve_console_groups }\nexport default install\n","import { LS_ROOT } from '../consts.js'\n\nexport { LS_ROOT } from '../consts.js'\n\nexport function getOverrideKeyForLogger(name: string): string {\n\treturn `logger.${name || 'default'}.logLevel`\n}\n\nexport function getLSKeyForOverride(key: string): string {\n\t// should we put v1 somewhere? no, most likely overkill.\n\treturn `${LS_ROOT}.override.${key}`\n}\n","export const LS_ROOT = '🛠UDA'\n","export const LIB = 'pwa-debugger'\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","parcelHelpers","defineInteropFlag","_universalDebugApiBrowser","_constsTs","logger","getLogger","LIB","suggestedLevel","default","export","exposeInternal","overrideHook","addDebugCommand","_indexJsDefault","_indexJs","interopDefault","_universalDebugApiInterface","exportAll","_p","root","v1","existing","candidate","ownLogger","OWN_LOGGER_NAME","debug","_","warn","log","minVersion","Math","min","minor","create","_practicalLoggerCore","_practicalLoggerBrowser","_keysJs","LS_ROOT","loggers","debugCommands","exposed","overrides","_ownLogger","createLogger","_getOverrideRequestedSJson","ovKey","LSKey","getLSKeyForOverride","localStorage","getItem","forcedLevel","getOverrideKeyForLogger","setLevel","JSON","parse","fatal","key","defaultValue","status","_getOverride","isOn","value","undefined","rawValue","badValue","error","p","DEFAULT_LOGGER_KEY","DEFAULT_LOG_LEVEL","path","pathParts","split","lastIndex","forEach","index","commandName","callback","source","_constsJs","ALL_LOG_LEVELS","LOG_LEVEL_TO_INTEGER","LOG_LEVEL_TO_HUMAN","_coreJs","checkLevel","_practicalLoggerTypes","_normalizeArgsJs","level","includes","commonDetails","outputFn","console","internalState","levelAsInt","reduce","rawMessage","rawDetails","message","details","normalizeArguments","arguments","serializer","msg","payload","time","Date","getLevel","addCommonDetails","group","groupCollapsed","groupEnd","_constsBaseJs","emerg","alert","crit","warning","notice","info","verbose","trace","silly","keys","sort","a","b","acc","ll","em","wa","slice","__esModule","dest","prototype","hasOwnProperty","enumerable","destName","looksLikeAnError","stack","raw_args","message_parts","Array","from","arg","push","String","join","_request_install_better_console_groups_if_not_already","_tinySingleton","_tinySingletonDefault","_practicalLoggerJs","_practicalLoggerJsDefault","ORIGINAL_CONSOLE","active","sinkOptions","betterGroups","sink","tiny_singleton","generator","instance","instantiated","args","_firefoxJs","_firefoxJsDefault","_chromiumJs","_chromiumJsDefault","_safariJs","_safariJsDefault","_noCssJs","_noCssJsDefault","options","useCss","explicitBrowser","quick_detect_browser","InstallTrigger","ApplePaySession","chrome","_commonJs","_commonJs1","HEADER_FONT_SIZE_STYLE","console_method_name","LEVEL_TO_CONSOLE_METHOD","console_method","line","add_styled_string","LEVEL_TO_COLOR_STYLE","FONT_FAMILY_BETTER_PROPORTIONAL","to_uniform_level","FONT_FAMILY_BETTER_MONOSPACE","build_args","str","chunk","styles","existing_chunks","existing_chunks_styles","MESSAGE_FONT_SIZE_STYLE","install","PATCHED_METHODS","uncollapse_level","lazy","original_console","group_invocations","in_original_call","ORIGINAL_METHODS","better_groupEnd","last_invocation","pop","is_effective","better_output","original_method","uncollapse","invocation","is_deployed","params","lowest_uncollapsed_index","findIndex","k","patched","Set","add","assert","assertion","method","has"],"version":3,"file":"logger.6e3b5e8d.js.map"}