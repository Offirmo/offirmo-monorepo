import assert from 'tiny-invariant'
import { type Immutable } from '@offirmo-private/ts-types'
import to_terminal from '@offirmo-private/rich-text-format--to-terminal'

import {
	BookPageReference,
} from '../library/book/types.js'
import {
	getê“½BookPageâµ§chain,
	getê“½BookPageRefâµ§from_chain,
	getê“½BookPageâµ§chainâµ§from_chain,
} from '../library/book/selectors.js'
import {
	renderê“½BookCover,
	renderê“½BookPage,
	renderê“½BookPageâµ§from_chain,
} from '../library/book/render--RichText.js'
import * as BookResolverLib from '../library/book--resolver/index.js'
import * as BookStashLib from '../library/book--stash/index.js'
import { renderê“½BookStash } from '../library/book--stash/render--RichText.js'

import { BookEntryê“½BHBHâ³‡001 } from './bhbv/01/index.js'
import { BookEntryê“½BHBHâ³‡022 } from './bhbv/22/index.js'

/////////////////////////////////////////////////
// this technical index store the books UIDs and the loading function
BookResolverLib.registerê“½Book(BookEntryê“½BHBHâ³‡001)
BookResolverLib.registerê“½Book(BookEntryê“½BHBHâ³‡022)

/////////////////////////////////////////////////

let stash = BookStashLib.create()
stash = BookStashLib.addê“½book(stash, BookEntryê“½BHBHâ³‡001.uid)
stash = BookStashLib.addê“½book(stash, BookEntryê“½BHBHâ³‡022.uid)

/////////////////////////////////////////////////

// imagine a landing page, with the list of books
console.log(`\nðŸ“šðŸ“šðŸ“š Stash ðŸ“šðŸ“šðŸ“š`)
console.log(to_terminal(renderê“½BookStash(
	stash
)))
console.log('')

// now let's imagine we click on one to learn more
console.log(`\nðŸ”ŽðŸ”ŽðŸ”Ž Inspecting a book: ðŸ”ŽðŸ”ŽðŸ”Ž`)
console.log(to_terminal(renderê“½BookCover(
	BookResolverLib.getê“½BookCover(BookEntryê“½BHBHâ³‡022.uid),
	//BookStashLib.getê“½experience(stash, BookEntryê“½BHBHâ³‡022.uid), TODO
)))
console.log('TODO take the experience into account!!!')
console.log('')

// now let's start reading it
/*console.log(`\nðŸ“–ðŸ“–ðŸ“– Readingâ€¦ ðŸ“–ðŸ“–ðŸ“–`)
await BookResolverLib.â††getê“½Book(BookEntryê“½BHBHâ³‡022.uid).then(book => {
	console.log(to_terminal(renderê“½BookPage(
		book,
		''
	)))
	console.log('TODO take the experience into account!!!')
	console.log('')
})*/

console.log(`\nðŸ“–ðŸ“–ðŸ“– Readingâ€¦ ðŸ“–ðŸ“–ðŸ“–`)
await BookResolverLib.â††getê“½Book(BookEntryê“½BHBHâ³‡022.uid).then(book => {

	let current_page_ref: BookPageReference = '' // empty = first
	let chain = getê“½BookPageâµ§chain(book, '')
	console.log(to_terminal(renderê“½BookPageâµ§from_chain(chain)))
	console.log('TODO take the experience into account!!!')
	current_page_ref = getê“½BookPageRefâµ§from_chain(chain)
	console.log(`TODO Bookmark current page: "${current_page_ref}"`)
	console.log('')

	for(let i = 0; i < 3; ++i) {
		chain = getê“½BookPageâµ§chainâµ§from_chain(chain, 'next')
		console.log(to_terminal(renderê“½BookPageâµ§from_chain(chain)))
		console.log('TODO take the experience into account!!!')
		current_page_ref = getê“½BookPageRefâµ§from_chain(chain)
		console.log(`TODO Bookmark current page: "${current_page_ref}"`)
		console.log('')
	}

	for(let i = 0; i < 5; ++i) {
		chain = getê“½BookPageâµ§chainâµ§from_chain(chain, 'previous')
		console.log(to_terminal(renderê“½BookPageâµ§from_chain(chain)))
		console.log('TODO take the experience into account!!!')
		current_page_ref = getê“½BookPageRefâµ§from_chain(chain)
		console.log(`TODO Bookmark current page: "${current_page_ref}"`)
		console.log('')
	}
})

/////////////////////////////////////////////////
