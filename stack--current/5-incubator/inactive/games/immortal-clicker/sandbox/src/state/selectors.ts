import assert from 'tiny-invariant'
import type { Immutable } from '@offirmo-private/ts-types'
import * as RichText from '@offirmo-private/rich-text-format'

import * as Cultivation from '../state--cultivation/index.js'
import { UState } from './types.js'
import { Sect } from '../generator--sect/src/index.js'
import { SectUID } from '../generator--sect/src/types.js'

/////////////////////////////////////////////////


function getê“½sectâµ§by_uid(u_state: Immutable<UState>, uid: SectUID): Immutable<Sect> {
	const sect = Object.values(u_state.setting.sects).find(sect => sect.uid === uid)
	assert(!!sect, `getê“½sectâµ§by_uid should never return null!`)
	return sect
}

function getê“½sectâµ§current(u_state: Immutable<UState>): null | Immutable<Sect> {
	const uid = u_state.cultivation.sectâµ§currentâ€¿uid

	if (uid === null)
		return null

	return getê“½sectâµ§by_uid(u_state, uid)
}

function getê“½recap(u_state: Immutable<UState>): RichText.Document {
	const isNewGame = (u_state.revision === 0)
	/*
	if (isNewGame) {
		return RichText.fragmentâµ§inline()
			.pushText('You are an ')
			.pushStrong('otherworlder')
			.pushText(', an adventurer from another worldâ€¦âŽ¨âŽ¨brâŽ¬âŽ¬')
			.pushText('Congratulations, you were chosen to enter the unknown realm of ')
			.pushStrong('Jaema')
			.pushText('!âŽ¨âŽ¨brâŽ¬âŽ¬')
			.pushText('Maybe were you just more courageous, cunning and curious than your peers?âŽ¨âŽ¨brâŽ¬âŽ¬')
			.pushText('But for now, letâ€™s go on an adventure, for glory âš” and loot ðŸ“¦ ðŸ’° !')
			.done()
	}
*/

	// name
	// cultivator or not
	// situation
	// challenge

	let recap = RichText.fragmentâµ§block()
		.pushText('You are ')

	// name
	recap.pushNode((() => {
		return RichText.strong()
			.pushInlineFragment(u_state.avatar.nameâµ§last, {
				id: 'nameâµ§last',
			})
			.pushText(' ')
			.pushInlineFragment(u_state.avatar.nameâµ§first, {
				id: 'nameâµ§first',
			})
			.done()
	})())

	// ...
	recap = recap.pushText(', a ')
		.pushInlineFragment('15', {
			id: 'age',
			classes: [],
		})
		.pushText(' years old ')

	recap.pushNode((() => {
		switch(Cultivation.getê“½cultivationâµ§type(u_state.cultivation)) {

			case 'mortal':
				return RichText.strong()
					.pushText('mortal cultivator')
					.done()

			case 'crippled':
				return RichText.fragmentâµ§inline()
					.pushStrong('crippled') // TODO red
					.pushText(' ')
					.pushStrong('immortal cultivator')
					.done()

			case 'none':
				return RichText.strong()
					.pushText('farmer') // TODO more starting occupations TODO sect servant
					.done()

			case 'immortal': {
				const current_sect = getê“½sectâµ§current(u_state)

				if (!current_sect) {
					return RichText.fragmentâµ§inline()
						.pushStrong('rogue') // TODO color
						.pushText(' ')
						.pushStrong('immortal cultivator')
						.done()
				}

				return RichText.fragmentâµ§inline()
					.pushStrong('immortal cultivator')
					.pushText(' from the ')
					.pushStrong(current_sect.name)
					.done()
			}
			default:
				throw new Error('Switch unhandled cultivation type!')
		}
		})())

	return recap.done()
}

/////////////////////////////////////////////////

export {
	getê“½sectâµ§current,
	getê“½recap,
}
