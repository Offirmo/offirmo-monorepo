import * as path from 'node:path'

import { PkgInfosResolver } from '@offirmo-private/pkg-infos-resolver'
import { getê“½pure_module_details, type PureModuleDetails, type Options as PureModuleAnalyzerOptions } from '@offirmo-private/pure-module--analyzer'
import { present } from '@offirmo-private/pure-module--presenter'

import {
	MONOREPO_ROOT,
	MONOREPO__ROOT_TSCONFIGâ€¿abs,
	MONOREPO__SHARED_TS_TYPINGSâ€¿abs,
} from '../src/consts.ts'
import { getê“½default_namespace, getê“½all_known_pure_module__dirsâ€¿abspath } from '../src/index.ts'

console.log(`\n~~~~~~~~~~~~~~~~\nHello!!!`)

/////////////////////////////////////////////////

async function refreshê“½monorepo() {
	console.log(`ðŸ›  ðŸ—‚ Refreshing Offirmoâ€™s monorepo "${MONOREPO_ROOT}"â€¦`)

	const pkg_infos_resolver = new PkgInfosResolver()

	const PURE_MODULE__DETAILS = await â††getê“½all_pure_module_details(pkg_infos_resolver)

	// TODO graph
	// TODO check loops
	// TODO check tiers
	// TODO compute graph degrees

	for (const pure_module_details of Object.values(PURE_MODULE__DETAILS)) {
		await present({
			indent: '   ',

			pure_module_path: pure_module_details.rootâ€¿abspath,
			pure_module_details,

			dest_dir: path.dirname(pure_module_details.rootâ€¿abspath),

			ts__config__path: MONOREPO__ROOT_TSCONFIGâ€¿abs,
			ts__custom_types__path: MONOREPO__SHARED_TS_TYPINGSâ€¿abs,

			pkg_infos_resolver,
		})
	}
}

/////////////////////////////////////////////////

async function resurrectê“½from(rootpkg_name) {
	console.log(`ðŸ›  ðŸ—‚ Resurrecting Offirmoâ€™s monorepo "${MONOREPO_ROOT}" from package "${rootpkg_name}"â€¦`)

	const pkg_infos_resolver = new PkgInfosResolver()

	const PURE_MODULE__DETAILS = await â††getê“½all_pure_module_details(pkg_infos_resolver)

	// TODO graph
	// TODO check loops
	// TODO check tiers
	// TODO compute graph degrees

}

/////////////////////////////////////////////////

refreshê“½monorepo()
//resurrectê“½from('@tbrpg/sandbox')

/////////////////////////////////////////////////

async function â††getê“½all_pure_module_details(pkg_infos_resolver: PkgInfosResolver): Promise<Record<string, PureModuleDetails>> {
	const all_known_pure_module__dirsâ€¿abspath = getê“½all_known_pure_module__dirsâ€¿abspath()
	console.log(all_known_pure_module__dirsâ€¿abspath)

	return await all_known_pure_module__dirsâ€¿abspath
		.reduce(async (à³±acc, pure_module_abspath) => {
			const acc = await à³±acc
			const pure_module_details = await getê“½pure_module_details(
				pure_module_abspath,
				{
					indent: '   ',
					getê“½default_namespace,
					pkg_infos_resolver,
				},
			)
			console.log(pure_module_details)
			acc[pure_module_details.fqname] = pure_module_details
			pkg_infos_resolver.inject({
				name: pure_module_details.fqname,
				version: pure_module_details.version || '0.0.1',
				types: pure_module_details.languages.has('ts') ? '[xxx present hack]' : undefined,
			}, { force: true })
			return acc
		}, Promise.resolve({} as Record<string, PureModuleDetails>))
}
