import React, { useState, Suspense, useRef } from 'react'

import {
	type Url‚Äøstr,
	getÍìΩuri‚µßnormalized‚Äøstr,
} from '@offirmo-private/ts-types-web'
import render‚µßto_react from '@offirmo-private/rich-text-format--to-react'

import {
	OHALinkRelation,
	type State,
	type OHAHyperMedia,
	getÍìΩlinks,
	getÍìΩengagements,
	getÍìΩaction_blueprints,
	getÍìΩcta,
	OHAHyperActionBlueprint,
	deriveÍìΩaction, type OHAHyperLink, type OHAStory, type OHAHyperAction, type OHAServer,
	create,
	navigate_to,
	onÍìΩloaded, isÍìΩOHAHyperLink,
} from '@offirmo-private/ohateoas'

import ·ÑÜChrome from './chrome/index.tsx'

import ·ÑÜViewport from '../l1-viewport/index.tsx'
import './component.css'

/////////////////////////////////////////////////
const NAME = `OHAFrame/1`

interface Props {
	state: State
	onÍìΩinteraction: (x: OHAHyperAction | OHAHyperLink | 'reload') => Promise<OHAStory | undefined>
}
function ·ÑÜComponent({state, onÍìΩinteraction}: Props) {
	if (window.o·êßextra?.flagÍìΩdebug_render) console.log(`üîÑ ${NAME}`)

	const ref‚µßdialog = useRef(undefined)
	const [fg_action, setFgAction] = useState<undefined | Promise<unknown>>(undefined)

	const $doc = state.$representation

	async function on_click_action(action_blueprint: OHAHyperActionBlueprint) {
		const { action, feedback } = deriveÍìΩaction(action_blueprint)

		console.log(`on_click_action`, action_blueprint, action, feedback)

		const ‡≥±dispatch_result = onÍìΩinteraction(action)
		let ‡≥±task = ‡≥±dispatch_result // so far

		// TODO 1D duration‚µßmin‚Äøms

		switch(feedback.tracking) {
			case 'forget':
				// TODO 1D
				break
			case 'background':
			// not implemented yet
			// fallback on foreground
			case 'foreground': {
				setFgAction(‡≥±task)
				ref‚µßdialog.current.showModal()
				break
			}
			default:
				throw new Error(`Feedback tracking "${feedback.tracking}" not implemented!`)
		}

		if (feedback.story) {
			throw new Error(`Not implemented feedback story!`)
		}

		if (feedback[OHALinkRelation.continue·ùçto]) {
			throw new Error(`Not implemented continue·ùçto!`)
		}

		‡≥±task
			.then((story?: OHAStory) => {
				console.log('task done', story)

				if (story) {
					console.warn(`TODO implement displaying story!`, story)

					// TODO continue to ??
				}

				// an action implies the need for a reload
				onÍìΩinteraction('reload')
			})
			.catch(err => {
				// TODO better error
				console.error('task failed', err)
			})
			.finally(() => {
				setFgAction(undefined)
				ref‚µßdialog.current.close()
			})
	}



	function _onÍìΩinteraction(x: OHAHyperActionBlueprint | OHAHyperLink): void {
		if (isÍìΩOHAHyperLink(x)) return onÍìΩinteraction(x)

		on_click_action(x)
	}

	return (
		<section key={NAME} style={{border: 'solid 2px black'}} className={['o‚ãÑfill-parent']}>
			<·ÑÜChrome url={state.url‚µßself} />
			<hr style={{color: 'red'}}/>

			{$doc ? <·ÑÜViewport $doc={$doc} onÍìΩinteraction={_onÍìΩinteraction} background_tasks={[]}/> : "[Loading‚Ä¶]"}

			<StatusBar text={state.status} />

			{/* TODO dialog should only cover the viewport!*/}
			<dialog open={!!fg_action} ref={ref‚µßdialog}>
				<p>Task in progress‚Ä¶</p>
				{/*<form method="dialog">
					<button>OK</button>
				</form>*/}
			</dialog>
		</section>
	)
}

/////////////////////////////////////////////////

interface StatusBarProps {
	text: string
}
function StatusBar({text}: StatusBarProps) {
	return text && (
		<code key="status_bar" style={{position: 'absolute', bottom: 0, left: 0}}>{text}</code>
	)
}

/////////////////////////////////////////////////

export {
	type Props,
	·ÑÜComponent,
}
