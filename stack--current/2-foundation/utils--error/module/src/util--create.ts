import type {
	XError,
	XXError
} from './types.ts'

import {
	COMMON_ERROR_FIELDS_EXTENDED,
} from './fields.ts'

/////////////////////////////////////////////////

const AUTOGENERATED_ERROR_FIELDS = new Set<keyof XError>([
	'stack',
	'message',
	'name',
])

interface ErrorCreationAttributes extends XXError {
	[k: string]: any
}
function createError(message: string, attributes: Partial<ErrorCreationAttributes> = {}, ctor = Error): XXError {
	message = String(message || attributes.message || 'Unknown error!')
	if (!(message.toLowerCase()).includes('error')) {
		if (ctor.name?.endsWith('Error'))
			message = ctor.name + ': ' + message
		else
			message = 'Error: ' + message
	}

	let err: XXError = (new ctor(message)) as any

	Object.keys(attributes).forEach(k => {
		const isErrorAttribute = COMMON_ERROR_FIELDS_EXTENDED.has(k as keyof XXError)
		const isAutogeneratedErrorAttribute = AUTOGENERATED_ERROR_FIELDS.has(k as keyof XError)
		if (k === 'details') {
			err.details = {
				...err.details,
				...attributes[k],
			}
		}
		else if (isAutogeneratedErrorAttribute) {
			// strange...
			// ignore, don't allow overriding auto-generated props
		}
		else if (isErrorAttribute) {
			// attach directly
			;(err as any)[k] = attributes[k]
		}
		else {
			err.details = err.details || {}
			err.details[k] = attributes[k]
		}
	})
	err.framesToPop = (err.framesToPop || 0) + 1

	return err
}

/////////////////////////////////////////////////

export {
	type ErrorCreationAttributes,

	createError,
}
