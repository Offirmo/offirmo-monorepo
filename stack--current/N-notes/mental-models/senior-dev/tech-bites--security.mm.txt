[ ] https://techcrunch.com/2025/01/31/techcrunch-reference-guide-to-security-terminology/
account takeover (ATO) https://www.kasada.io/use-cases/account-takeover/
authentication
authorisation
bad defaults -- firebase https://env.fail/posts/firewreck-1
buffer overflows and how to protect against them
BULLRUN (decryption program)  clandestine, highly classified program to crack encryption of online communications and data, which is run by the United States National Security Agency (NSA) https://en.wikipedia.org/wiki/Bullrun_(decryption_program)
cache poisoning https://en.wikipedia.org/wiki/Cache_poisoning
canary -- tokens = https://canarytokens.org/
Capture The Flag (CTF) competitions = hacking contests consisting of challenges in categories such as web security, cryptography, reverse engineering, exploitation which are open to everyone
checkout fraud = scalpers https://www.kasada.io/use-cases/checkout-fraud/
CIS benchmarks https://www.cisecurity.org/insights/blog/getting-to-know-the-cis-benchmarks
cloud -- Cloudbleed https://en.m.wikipedia.org/wiki/Cloudbleed
compartmentalize - so your system is not all or nothing
content scrapping = can be anti-competitive https://www.kasada.io/use-cases/content-scraping/
Content security policy (CSP) https://web.dev/articles/csp
credential stuffing https://owasp.org/www-community/attacks/Credential_stuffing
Cross Site Scripting (XSS) -- defense = escaping
Cross Site Scripting (XSS) = attack where a user is able to exploit weaknesses in a web application to inject arbitrary scripts that execute on the browsers of victim users.  This code executes from the origin of the vulnerable domain. https://portswigger.net/web-security/cross-site-scripting
Cross-Site Request Forgery (CSRF / XSRF) -- defense -- double submit
Cross-Site Request Forgery (CSRF / XSRF) -- defense -- manual confirmation
Cross-Site Request Forgery (CSRF / XSRF) -- defense -- sync token https://hirunimirando.blogspot.com/2018/10/synchronizer-token-pattern-nodejs.html
Cross-Site Request Forgery (CSRF / XSRF) = attack where requests can be made from an attacker-controlled site to an endpoint to perform actions on behalf of the victim without the victim’s knowledge or consent.
crypto -- ciphertext indistinguishability = important security property of encryption schemes = an adversary will be unable to distinguish pairs of ciphertexts based on the message they encrypt. indistinguishability under chosen plaintext attack is considered a basic requirement for most provably secure public key cryptosystems  https://cse.iitkgp.ac.in/~debdeep/courses_iitkgp/FCrypto/scribes/scribe8.pdf
crypto -- don't write your own
crypto -- using crypto doesn't mean you're secure (attackers will look for a weaker link)
defence -- Primary / Secondary / Tertiary
defense in depth https://en.wikipedia.org/wiki/Defense_in_depth_(computing)
denial of wallet = like DoS but service down due to no more credits https://www.kasada.io/use-cases/genai-abuse-73-percent-have-experienced-genai-security-incidents/
dependency chain abuse = supply chain attack https://www.paloaltonetworks.com.au/cyberpedia/dependency-chain-abuse-cicd-sec3
device posture
encryption of stored data
fake account creation = to harm https://www.kasada.io/use-cases/fake-account-creation/
FIDO Alliance
File Path (Directory) Traversal
filtering = to pass input data through a logic that will hold parts of input that match a certain criteria and let other input pass through as is. The filter logic then makes a specific decision on the data that is in hold - possibly discarding it or transforming it.
glassbox review = vs blackbox, looking at what happens when stimulated
Google Project Zero https://googleprojectzero.blogspot.com/p/about-project-zero.html
guidelines -- CGI security https://www.cgisecurity.com/owasp/html/ch04.html
guidelines -- S/O https://stackoverflow.com/questions/2794016/what-should-every-programmer-know-about-security
have I been pwned? https://www.troyhunt.com/
In-the-Wild (ITW) exploit
input -- never trust any input!
input -- validate input from all untrusted sources - use whitelists not blacklists
input -- validation -- 2 levels : Syntactical and Semantic
input -- validation -- Client-Side (nice to have) and / or Server-Side (mandatory)
input -- validation -- semantic validation = correctness of their values in the specific business context (e.g. start date is before end date, price is within expected range)
input -- validation -- syntactic validation = correct syntax of structured fields (e.g. SSN, date, currency symbol).
input -- validation aka data validation = testing of any input (or data) provided by a user or application against expected criteria i.e. to confirm that the data is in the correct format and within the constraints set by the application
insufficient Transport Layer  Security (TLS)
keep it simple - complexity increases the likelihood of security holes
keep your attack surface to a minimum
key stretching https://en.wikipedia.org/wiki/Key_stretching
list -- allow list -- predefined set
list -- allow list -- regex = more flexible but less secure
list -- allow list = operate on a deny by default policy, where anything that hasn’t been expressly allowed will be blocked.
list -- deny list -- WARNING not sufficient to provide strong validation. They can be often bypassed very easily and should rather be used as part of defence in depth mechanisms  i.e. they should be used in conjunction with other validation mechanisms like allow lists, Regex checks etc.
list -- deny list = opposite of allowlist. It operates on an allow by default policy where everything is permitted except for the cases that a user has specified.
make sure you fail securely
Malicious File Upload
network ACL
Open / Unvalidated Redirects
OS Command Injection = attacker is able to inject and execute malicious code within a command that is passed to an application's operating system shell
OWASP top 10 https://owasp.org/www-project-top-ten/
passkeys = a modern cryptographic alternative to passwords and seed phrases. Passkeys combine something you have (a physical device such as a laptop, mobile phone, or a security key like YubiKey) with something you are or know (a fingerprint, face, or PIN) to generate a cryptographic public/private key pair that secures an account.
pin codes -- most common https://informationisbeautiful.net/visualizations/most-common-pin-codes/
PKI = Public Key Infrastructure
plan for security from the start - it's not something you can bolt on at the end
principle of least privilege
pwned = https://haveibeenpwned.com/API/v3 https://github.com/BlinqOSS/is-pwned
salting https://en.wikipedia.org/wiki/Salt_(cryptography)
sandbox
sandbox -- escape https://googleprojectzero.blogspot.com/2025/05/breaking-sound-barrier-part-i-fuzzing.html
sanitization -- data as part of database query
sanitization -- data as part of the query string in a link's URL
sanitization -- data as the value for a JavaScript variable
sanitization -- data as the value for an HTML attribute
sanitization -- data within an HTML element
sanitization -- encoding -- escaping = subset of encoding where characters are encoded using an escape character. It involves adding a special character before the character/string to avoid it being misinterpreted, for example, adding a \ character before a " (double quote) character so that it is interpreted as text and not as closing a string.
sanitization -- encoding aka “Output Encoding” = type of Sanitization technique which involves translating special characters into some different but equivalent form that is no longer dangerous in the target interpreter, for example translating the < character into the &lt; string when writing to an HTML page.
sanitization -- even more contexts
sanitization -- filtering -- filtering and transforming (replacing) the unwanted characters in the input data.
sanitization -- filtering -- filtering out (removing)
sanitization -- using a well-tested library
sanitization = elimination of unwanted characters from the input by means of removing, replacing, encoding, or escaping the characters. Sanitization should be implemented before the data is passed across a trust boundary (output sanitization). The appropriate method for escaping content will depend a lot on the context in which the data will be used.
secrets -- hiding secrets is hard - and secrets hidden in code won't stay secret for long
secure by default = security is ON by default, need to be manually disabled if not needed (ex. dev).  Historically, many libraries had to be configured for them to be used securely.  For example, user content in JSP applications presented a cross site scripting risk, and developers needed to use special functions such as c:out or fn:escapeXml in order to prevent such vulnerabilities.  In a secure by default library, the risk is inherently prevented in the library implying that the developer does not need to think about special functionality in order to use it securely.
Secure Cryptographic Hashing
secure data at rest
security posture = overall cybersecurity strength and readiness of an organization, ability to recognize threats and your readiness to mitigate them or recover from an attack
Server Side Request Forgery (SSRF) -- defense -- outbound proxy
Server Side Request Forgery (SSRF) = attacker to send a crafted request from a vulnerable server to an arbitrary destination. The attack can be used to bypass security restrictions and access internal systems and network resources that are not intended to be publicly accessible.
shift left = earlier security
spectre = class of attacks https://www.cloudflare.com/en-au/learning/security/threats/meltdown-spectre/
threat modelling
through obscurity -- ok if not only https://security.stackexchange.com/questions/32064/at-what-point-does-something-count-as-security-through-obscurity
through obscurity -- still useful https://news.ycombinator.com/item?id=24444497
through obscurity https://en.wikipedia.org/wiki/Security_through_obscurity
timed-release encryption scheme = to encrypt messages toward the future that anybody can decrypt when the time has come, even if you or your services are off-line by then https://docs.drand.love/
TLS "Transport Layer Security"
XML External Entity (XXE) = attack where an attacker is able to exploit applications processing XML inputs using improperly configured parser
YubiKey = not necessarily safer if no pin = if stolen and no pin, cooked
zero-day = a vulnerability that attackers know about, and there is no patch available from the vendor
ZK-SNARKs https://vitalik.eth.limo/general/2022/06/15/using_snarks.html
zxcvbn = password strength estimation https://zxcvbn-ts.github.io/zxcvbn/
