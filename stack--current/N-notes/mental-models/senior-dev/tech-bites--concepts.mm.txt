2025 https://www.oreilly.com/radar/the-end-of-programming-as-we-know-it/
5 min zoom vs 10 emails/comments volley https://blog.jpl-consulting.com/2010/04/ten-email-volley-or-five-minute-phone-call/
[ ] +++ https://en.wikipedia.org/wiki/List_of_software_development_philosophies
[ ] +++ https://explorer.globe.engineer/
[ ] +++ https://martinfowler.com/
[ ] +++ https://www.hackterms.com/about/all
[ ] +++ https://www.linfo.org/main_index.html
[ ] 165 things https://news.slashdot.org/story/17/03/19/2323250/oreilly-site-lists-165-things-every-programmer-should-know
[ ] 97 Things Every Programmer Should Know http://programmer.97things.oreilly.com/wiki/index.php/Contributions_Appearing_in_the_Book
[ ] awesome falsehoods https://github.com/kdeldycke/awesome-falsehood
[ ] http://meta.programmers.stackexchange.com/questions/6166/open-letter-to-students-with-homework-problems
[ ] http://nodeschool.io/#workshoppers
[ ] http://rethinkdb.com/blog/node-4/
[ ] http://www.letudiant.fr/palmares/palmares-des-ecoles-d-ingenieurs/ouverture-internationale-2.html
[ ] https://blog.quastor.org/
[ ] https://craftinginterpreters.com/
[ ] https://devpedia.pages.dev/
[ ] https://en.wikipedia.org/wiki/Reference_class_forecasting
[ ] https://github.com/anvaka/npmrank/blob/master/sample/dependencies.md
[ ] https://github.com/charlax/professional-programming
[ ] https://github.com/EbookFoundation/free-programming-books/blob/main/books/free-programming-books-subjects.md
[ ] https://github.com/kilimchoi/engineering-blogs
[ ] https://matklad.github.io/2023/08/06/fantastic-learning-resources.html
[ ] https://medium.com/javascript-scene/the-single-biggest-mistake-programmers-make-every-day-62366b432308
[ ] https://tratt.net/laurie/blog/
[ ] https://www.atlassian.com/team-playbook/plays/elevator-pitch
[ ] https://www.developing.dev/p/5-books-every-software-engineer-should
[ ] https://www.managingtheunmanageable.net/morerulesofthumb.html
[ ] https://www.tedinski.com/archive/
[ ] https://zknill.io/posts/every-programmer-should-know/
[ ] patterns https://www.patterns.dev/
[ ] SWE at Google https://abseil.io/resources/swe-book/html/toc.html
[ ] technical things every software developer should know https://github.com/mtdvio/every-programmer-should-know
[ ] testing https://testing.googleblog.com/
a11y = Accessibility
abort controller https://kettanaito.com/blog/dont-sleep-on-abort-controller
abstraction -- level
abstraction -- wrong, premature "most of the issues arise from trying to eagerly solve a problem before it fully exists in reality" https://www.transcendsoftware.se/posts/the-perils-of-premature-abstraction/ https://zackoverflow.dev/writing/premature-abstraction
abstraction https://www.merrickchristensen.com/articles/abstraction/
access control
access control -- discretionary https://en.wikipedia.org/wiki/Discretionary_access_control
access control -- mandatory https://en.wikipedia.org/wiki/Mandatory_access_control
access control -- role-based (RBAC)
actually portable executables https://justine.lol/ape.html
adapters = specific to sth non-standard
allocation
annotation
anomaly detection
anti-pattern -- constants file = https://softwareengineering.stackexchange.com/a/290009/39510 https://bytedev.medium.com/the-god-constant-class-30d82cd4f677
anti-pattern -- god class / file
API (Application Programming Interface) = interface (set of subroutine definitions, protocols, and tools) for exposing a software feature, defines interactions that allows two applications to talk to each other https://www.postman.com/what-is-an-api/
API -- AIPs (API Improvement Proposals) https://google.aip.dev/
API -- approach design with real-life scenarios and code in mind.
API -- avoid introducing breaking changes as much as possible.
API -- bad = make assumptions about what you are trying to do, but then break when those assumptions are not exactly right, ex. AppCache
API -- deprecation -- decommission = end support for an API in production. A decommissioned API will no longer appear in any supported Public API surface, and calls made to it are not guaranteed to succeed
API -- deprecation -- deprecate = To formally indicate that support for an API has been withdrawn, and that the API will be decommissioned in the future. Deprecation of an API has no immediate functional impact on the API itself or existing consumers of the API
API -- deprecation -- deprecation period = time between an API being marked as deprecated and it being decommissioned
API -- deprecation -- process = decide, analyse existing use, document, consult, announce, outreach, support, track, turn off
API -- deprecation -- retiring = decommissioning of an API without a suitable replacement
API -- design -- Don’t contradict past decisions, Don’t reduce future options
API -- dev solution -- https://mockapi.io/
API -- dev solution -- https://reqres.in/
API -- easy to build one, hard to build the **right** one
API -- economy = the depth and breadth of APIs that are available for developers to use in the current landscape.
API -- endpoint type -- mutation = creates, updates, or deletes some data
API -- endpoint types -- query = gets some data
API -- endpoint types -- query, mutation, or subscription https://trpc.io/docs/concepts#vocabulary
API -- endpoint types -- subscription = creates a persistent connection and listens to changes
API -- enums over booleans https://www.teamten.com/lawrence/programming/prefer-enums-over-booleans.html
API -- external-facing = are where "design up front" and consideration about future use cases really matters. Changing APIs is a pain for us and for our users, and creating backwards incompatibility is horrible (although sometimes impossible to avoid). https://opensource.com/article/17/5/30-best-practices-software-development-and-testing
API -- features should be small, atomic and composable.
API -- follow existing patterns and conventions.
API -- future proof https://protobuf.dev/programming-guides/api/
API -- guide developers into the pit of success.
API -- Hyrum's Law = With a sufficient number of users of an API, all observable behaviors (public or not) of your system will be depended on by somebody https://www.hyrumslaw.com/ https://xkcd.com/1172/
API -- input = Prefer objects for inputs. If a function accepts multiple pieces of data — or may accept multiple pieces of data in the future — create a single object parameter, rather than using multiple parameters. This ensures that: We can add parameters without breaking the contract + The order of the parameters becomes unimportant
API -- internal / external / partner
API -- must not violate the principle of least astonishment.
API -- output = prefer objects, same reasons as input = extensible without breaking the contract
API -- pagination -- token https://protobuf.dev/best-practices/api/#define-pagination-api
API -- public = Requires a commitment to maintain it; Can affect the velocity of the underlying feature
API -- result = Prefer declarative interfaces: An API that describes a result, rather than how to achieve that result, is more stable, since the underlying implementation can evolve without affecting the API signature
API -- should not force developers to do anything that could easily be done for them.
API -- should present the mechanism, not the experience.
API -- should provide helper functions to compose small features into common use-cases where appropriate.
API -- tradeoffs = ex. safety / flexibility / extensibility / speed
architectural decision (AD) = a justified design choice that addresses a functional or non-functional requirement that is architecturally significant
architectural decision -- or rather "tactical bet"
architectural decision record (ADR) = captures a single AD and its rationale; can help one understand the reasons for a chosen architectural https://adr.github.io/
architectural styles = independent of any specific implementation
architecturally significant requirement (ASR) = a requirement that has a measurable effect on the architecture and quality of a software and/or hardware system
architecture -- services https://en.wikipedia.org/wiki/Service-oriented_architecture
asking smart questions (tech) http://www.catb.org/esr/faqs/smart-questions.html
assembly
async -- "coloring" https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/
async -- design pattern -- reactor pattern
async -- sync = By synchronous we mean a function that calls its callback on the same tick in the javascript event loop, without doing any I/O or using any timers
atomic
audit trail = what happened, when, who made the request and how?
authentication
B2B (Business to Business)
B2C (Business to Customer)
B2G (Business to Government)
BDD (Behavior-Driven Development) https://cucumber.io/school/   Discovery -> Formulation -> Automation
Beyoncé Principle = If you liked it, then you shoulda put a test on it
big companies software = At big companies, software tends to be written by large and frequently changing teams of mediocre programmers https://paulgraham.com/noop.html
blocking
blocklist/blacklist -- https://paulgraham.com/spamhausblacklist.html
bro culture in tech https://www.smh.com.au/technology/australias-tech-darling-atlassian-in-sexism-row-20140605-zryjd.html
bug -- 3 questions -- 1. Have I made this error anywhere else?
bug -- 3 questions -- 2. What happens when I fix the bug?
bug -- 3 questions -- 3. How can I change my ways to make this bug impossible?
bug -- 3 questions https://mental-reverb.com/blog.php?id=42
bugs -- $370M bug https://en.wikipedia.org/wiki/Ariane_flight_V88
bugs -- mail in 500 miles radius https://www.ibiblio.org/harris/500milemail.html
bugs -- significants https://en.wikipedia.org/wiki/List_of_software_bugs
build & delivery part of a product
C++ 26 https://thenewstack.io/coming-to-iso-c-26-standard-an-ai-acceleration-edge/
C10k problem https://en.wikipedia.org/wiki/C10k_problem
cache
cache -- stampede https://en.wikipedia.org/wiki/Cache_stampede
caching -- S3 FIFO https://s3fifo.com/
capability = an end-to-end user experience or a set of related functionality. Example: “a user can create a ticket in a Jira project”
career -- small business programmer https://smallbusinessprogramming.com/how-to-be-a-wildly-successful-small-business-programmer/
career -- staff engineer https://www.linkedin.com/posts/alexewerlof_no-one-is-talking-about-staff-engineer-mental-activity-7297125140159471617-_J1-
cargo cult = Let’s face it. You are not Google scale and you never will be. Stop cargo-culting technology just because “Google uses it” and therefore “it’s an industry best-practice.” https://reasonablypolymorphic.com/blog/protos-are-wrong/
case -- CamelCase
case -- SHOUTY_CASE
case -- snake_case
CD (continuous delivery)
CD (Continuous Delivery) https://www.browserstack.com/guide/difference-between-continuous-integration-and-continuous-delivery https://spinnaker.io/
CD (continuous deployment) -- Defensive = Expect the unexpected. Expect that devs will break things in novel ways
CD (continuous deployment) -- High Frequency = Unreleased code is expensive. Get it out
CD (continuous deployment) -- Independent = Components are not tied to each other. They release independently
CD (continuous deployment) -- No Downtime = No "maintenance mode" or expected downtime as part of releasing
change -- category -- C1 = removing a product
change -- category -- C2 = Widespread change requiring high customer/ecosystem effort
change -- category -- C3 = Localised change requiring high customer/ecosystem effort
change -- category -- C4 = Change requiring low customer/ecosystem effort
change -- category -- C5 = Change requiring no customer/ecosystem effort
change -- category -- dynamic categorization = gathered through tooling + PRs
change -- management
change -- release tracks https://support.atlassian.com/organization-administration/docs/manage-product-release-tracks/
change -- support readiness
change -- type -- experiment – temporary change intended to be visible to a small cohort of customers
change -- type -- technical only – invisible to customers
change -- type -- user-facing – permanent change that users will notice
change = what causes most of the failures
changelog -- conventional https://github.com/conventional-changelog
changelog -- standard https://keepachangelog.com/  https://common-changelog.org/
CHOP "chat-oriented programming"
CI (Continuous Integration) https://www.browserstack.com/guide/difference-between-continuous-integration-and-continuous-delivery
class
client/server -- multi-tier architecture
clippy https://www.mentalfloss.com/article/504767/tragic-life-clippy-worlds-most-hated-virtual-assistant
close / destroy / terminate / dispose / release / free / delete / destruct / finalize / teardown / cleanup / shutdown / stop / end / abort / cancel / halt / kill / exit / quit / unload / dispose...
code -- range -- prompt "make it pop" https://theoatmeal.com/comics/design_hell
code -- range -- spec = less formal
code -- range = prompt > spec > code
code is the enemy = It can go wrong, and it needs maintenance. Write less code. Delete code. Don’t write code you don’t need https://opensource.com/article/17/5/30-best-practices-software-development-and-testing
code quality = the only definition of quality in code that makes any sense is our ability to change the code. If it's easy to change, it's high quality; if it's hard to change, it's not.
code quality https://blog.jim-nielsen.com/2024/easy-changes/
code readability -- visual patterns https://seeinglogic.com/posts/visual-readability-patterns/
code reuse -- DRY
code reuse -- reduce reuse recycle
code reuse -- small focused modules = Make small focused modules for reusability and to make it possible to build larger more advanced things that are easier to reason about https://sindresorhus.com/blog/small-focused-modules
code review https://www.linkedin.com/posts/ajgreenwell_code-reviews-have-unwritten-laws-i-had-activity-7239611908914319360-_MHW/
codebase -- type -- hobby
codebase -- type -- large established codebase = single-digit million lines of code (~5M, let’s say); Somewhere between 100 and 1000 engineers working on the same codebase; The first working version of the codebase is at least ten years old
codebase -- type -- open source
codebase -- type https://www.seangoedecke.com/large-established-codebases/
codemod
cohesion = degree to which the elements inside a module belong together https://en.wikipedia.org/wiki/Cohesion_(computer_science)
command query separation (CQS)
comments
comments -- conventional
comments -- leading, trailing, detached https://github.com/microsoft/TypeScript/wiki/FAQ#trailing-leading-and-detached-comments
commits
commits -- conventional  https://www.conventionalcommits.org/  https://gist.github.com/qoomon/5dfcdf8eec66a051ecd85625518cfd13
compatibility -- backward = consumer's new version can read producer's old data
compatibility -- forward = consumer's old version can read producer's new data
compatibility -- window = duration deployed code needs to remain compatible
compatibility = 2x things being able to live together without issues
compatibility window = how long should we attempt to ensure that a deployment of code doesn’t get blown up by incompatible payloads. Ex. mobile app = 6 month, web page = 1d, server = 1 release
compile to js
compiler
compiler -- stanford course http://openclassroom.stanford.edu/MainFolder/CoursePage.php?course=Compilers
compiler = translates code from one language to another at a different level of abstraction. As a result, the compiled code from a compiler is much harder for a human to read than the original.
complexity budget https://htmx.org/essays/complexity-budget/
compute
compute -- hosted compute
concurrency -- ABA problem
concurrency -- atomic
concurrency -- atomic -- operations -- compare-and-swap (CAS) = an atomic instruction used in multithreading to achieve synchronization https://en.wikipedia.org/wiki/Compare-and-swap
concurrency -- atomic -- operations -- fetch-and-add (FAA) = an atomic instruction used in multithreading to achieve synchronization https://en.wikipedia.org/wiki/Fetch-and-add
concurrency -- atomic -- operations -- load-link/store-conditional (LL/SC) = an atomic instruction used in multithreading to achieve synchronization https://en.wikipedia.org/wiki/Load-link/store-conditional
concurrency -- atomic -- operations -- test-and-set (TAS) = an atomic instruction used in multithreading to achieve synchronization https://en.wikipedia.org/wiki/Test-and-set
concurrency -- atomic -- operationsRead–modify–write https://en.wikipedia.org/wiki/Read%E2%80%93modify%E2%80%93write
concurrency -- critical sections
concurrency -- fiber
concurrency -- lock-free
concurrency -- locks -- deadlock, distributed deadlock https://en.wikipedia.org/wiki/Deadlock
concurrency -- locks -- livelock https://en.wikipedia.org/wiki/Deadlock#Livelock
concurrency -- locks -- mutex
concurrency -- locks -- semaphore
concurrency -- non-blocking
concurrency -- non-blocking -- collections
concurrency -- optimistic concurrency control
concurrency -- scheduling -- priority inversion https://en.wikipedia.org/wiki/Priority_inversion
concurrency -- spinlock
concurrency -- starvation https://en.wikipedia.org/wiki/Starvation_(computer_science)
concurrency -- thread
concurrency -- thread pool
concurrency -- wait-free, lock free
concurrent ownership
config -- defineConfig()
config -- json / jsonc / json5 / js / ts
connascence https://en.wikipedia.org/wiki/Connascence
considered harmful
considered harmful -- clever code https://www.joshwcomeau.com/career/clever-code-considered-harmful/
considered harmful -- NODE_ENV
consistency = lack of consistency is the primary long-term killer of large codebases, because it makes it impossible to make any general improvements https://www.seangoedecke.com/large-established-codebases/
constructor
containers -- podman https://docs.podman.io/en/latest/Introduction.html
content age rating -- "Common Sense" Media (private org) https://www.commonsensemedia.org/about-us/our-mission/about-our-ratings
content age rating -- culture = Different cultures have different standards for what is age-appropriate: some find graphic violence more acceptable than nudity, and some vice versa.
content age rating -- G (General) = aka Safe for School, Appropriate for ages 13+
content age rating -- identify = content need to be identified and labelled as safe or unsafe for each age rating. Given the volume, human review may not be a practical option.
content age rating -- PG (Parental Guidance) = aka Not Safe For School (NSFS) = Appropriate for ages 15+
context switch
convention over configuration
Conway's law https://en.wikipedia.org/wiki/Conway%27s_law
copyright -- clean-room design = copying a design by reverse engineering and then recreating it without infringing any of the copyrights associated with the original design https://en.m.wikipedia.org/wiki/Clean-room_design
copyright -- code, binary, BIOS, APIs...
copyright -- license -- REUSE https://reuse.software/tutorial/
copyright -- statement https://matija.suklje.name/how-and-why-to-properly-write-copyright-statements-in-your-code
corporate politic https://www.breakingpoint.tech/p/where-do-corporate-politics-come
correlation
coupling -- loose https://en.wikipedia.org/wiki/Loose_coupling
courbe d'expertise
CPU https://cpu.land/
CQRS (command query responsibility segregation)
CRDT / automerge / local first https://automerge.org/
cron https://onlineornot.com/the-complete-guide-to-cron-jobs
cross cutting concerns = aspects of a program that affect several modules without the possibility of being encapsulated in any of them https://en.wikipedia.org/wiki/Cross-cutting_concern
cross-platform https://en.m.wikipedia.org/wiki/Cross-platform_software
CRUD "create, read, update and delete"
crunch
CTAP
culture -- low/high context https://journals.sagepub.com/doi/10.1177/0146167212455828
Cupertino effect = bad spell checking
currying https://en.wikipedia.org/wiki/Currying
data -- description = for discoverability
data -- hydration
data -- lake
data -- lineage tracking = who created it, transformed it, enriched it...
data -- privacy
data -- re-extraction = of v3.4.5
data -- versioning = of content + schema
data format -- consumer vs producer
data format -- consumer vs producer -- independent release/deploy
data format -- do NOT conflate serialization w/ working representation w/ persisted w/ interchange! (cf. protobuf)
data format -- future proofing = vastly overrated now that we have semver!! (+ migrations)
data format -- interchange -- https://en.wikipedia.org/wiki/Advanced_Scientific_Data_Format
data format -- interchange -- JSON -- binary https://msgpack.org/
data format -- interchange -- JSON -- RPC https://www.jsonrpc.org/
data format -- interchange -- JSON https://www.json.org/
data format -- interchange -- JSON mini = some sort of protobuf-derived space-saving representation (single letters for keys)
data format -- interchange -- JSON5 https://json5.org/ https://github.com/json5/json5
data format -- interoperability, fungibility, hackability, debuggability, anti-fragility
data format -- linting = ex. for JSON compatibility, for backward/forward compatibility...
data format -- one goal of defining the type once then generating code in various languages (hard!)
data format -- protobuf -- XXX criticized "the worst serialization format and schema" BC conflate transport representation w work representation + bad type system https://news.ycombinator.com/item?id=21871514
data format -- protobuf = (at the time of XML, before JSON, also bc Java doesn't work well with JSON) language-neutral, platform-neutral extensible mechanisms for serializing structured data https://protobuf.dev/overview/ https://github.com/protocolbuffers/protobuf
data format -- serialization -- persistence
data format -- serialization -- stability! ex. sorting by keys in k/v, important for immutability! (ex. stable hashing, caching, diff...)
data format -- serialization -- wire format
data format -- serialization -- wire format -- https://capnproto.org/ = serialization only! (better than protobuf)
data format -- TODO find TS stuff
data residency -- storing = storing user data in the same jurisdiction as the customer’s residence.
data residency = helps customers feel confident that the data they own (or about them) is subject to their local laws and regulations. This is especially important for enterprise, education, and government customers, many of whom might have rules and regulations mandating the use of data-resident software.
databases
databases -- joins https://justinjaffray.com/joins-13-ways/
databases -- normalization
databases -- sharding -- middleware -- gizzard (legacy) = sharding middleware https://github.com/twitter-archive/gizzard
databases -- sharding https://www.mongodb.com/docs/manual/sharding/
dataset
DBMS (Database Management System)
DDD (Domain-Driven Design) https://en.wikipedia.org/wiki/Domain-driven_design
DDOS
DDOS -- self https://waxy.org/2023/07/twitter-bug-causes-self-ddos-possibly-causing-elon-musks-emergency-blocks-and-rate-limits-its-amateur-hour/
debugger
debugging
defensive programming = Always think about what can go wrong, what will happen on invalid input, and what might fail, which will help you catch many bugs before they happen https://opensource.com/article/17/5/30-best-practices-software-development-and-testing
defensive programming https://dev.to/cubiclebuddha/is-defensive-programming-actually-healthy-5flj
define “good” = what “good” looks like to your org. Achieving that ideal doesn’t depend on which technology you use. It depends on understanding your company’s requirements and what assumptions will remain true regardless of the tools you use.
demos
dependencies
dependency -- hell https://en.wikipedia.org/wiki/Dependency_hell
dependency -- transitive problem https://htmx.org/essays/vendoring/
dependency -- vendoring = a technique where you copy the source of another project directly into your own project https://htmx.org/essays/vendoring/
dependency injection -- containers = frameworks that manage the dependencies of objects https://blog.ploeh.dk/2014/06/10/pure-di/
dependency injection -- pure = no framework https://blog.ploeh.dk/2014/06/10/pure-di/
dependency injection -- vs. func = if magic, makes everything functionally impure https://blog.ploeh.dk/2017/01/30/partial-application-is-dependency-injection/
dependency injection = passing parameters. no need for complex lib
deployment maturity levels https://itnext.io/deployment-maturity-levels-feab55c20d04
design patterns
design patterns -- behavioral -- command = command, receiver, invoker and client https://en.wikipedia.org/wiki/Command_pattern
design patterns -- facade https://en.wikipedia.org/wiki/Facade_pattern
design patterns -- strangler https://paulhammant.com/2013/07/14/legacy-application-strangulation-case-studies/
design patterns -- visitor (not recommended, see grug)
design smell https://en.wikipedia.org/wiki/Design_smell
desirables -- changeability
desirables -- isolation
desirables -- no complexity
desirables -- no maintenance
desirables -- no surprises
desirables -- quality (vague)
desirables -- readability
desirables -- reliability
desirables -- resilience
desirables -- side-effect free
dev style -- TDD
dev style -- TDD -- red → green → refactor
development containers https://containers.dev/implementors/spec/
DevEx
DevOps https://www.browserstack.com/guide/difference-between-continuous-integration-and-continuous-delivery
DevOps Research and Assessment (DORA) = how we should develop our software right and what numbers we should show to our managers to make them happy https://medium.com/booking-com-development/a-step-by-step-guide-on-how-not-to-implement-dora-metrics-85081f0d4484
discriminated union = a special kind of union in which a) all the options are object schemas that b) share a particular key (the "discriminator"). Based on the value of the discriminator key, the language is able to "narrow" the type signature as you'd expect.
DNS (Domain Name System)
do what I mean (DWIM) = computer systems attempt to anticipate what users intend to do, correcting trivial errors automatically rather than blindly executing users' explicit but potentially incorrect input
dogfooding = practice of a company using its own products or services internally as a way to test, evaluate, and improve them. Essentially, the company's employees become the primary users of their own products.
domain -- Domain Driven Design (DDD) https://en.wikipedia.org/wiki/Domain-driven_design
domain -- top-level = collection of services, libraries, and other components you can logically group into an API for a specific business function to represent a unit of autonomous decision-making.
domain -- top-level = should be A grouping based on functionality, not organizational hierarchy; Able to operate as an independent area of decision-making; Stable in the face of organizational changes.
domain = a targeted subject area of a computer program
DRY (don't repeat yourself)
DRY -- WET (write everything twice) https://overreacted.io/the-wet-codebase/
dry run
DSL (Domain Specific Language)
durable execution = development paradigm that preserves complete application state so that upon host or software failure it can seamlessly migrate execution to another machine https://stackoverflow.blog/2024/05/28/an-open-source-development-paradigm/
ecosystem -- ADK "App Development Kit" = https://medium.com/disney-streaming/introducing-the-disney-application-development-kit-adk-ad85ca139073
ecosystem -- Apps
ecosystem -- create
ecosystem -- repositories = npm, jsr https://deno.com/blog/openai-on-jsr
ecosystem -- SDK
ecosystem -- templates
Effect<Success, Error, Requirements> https://effect.website/docs/guides/essentials/the-effect-type
effective engineer -- LeadDev -- 1. Care about the user and their needs
effective engineer -- LeadDev -- 10. Be comfortable taking on new challenges
effective engineer -- LeadDev -- 2. Be a great problem solver
effective engineer -- LeadDev -- 3. Keep things simple, while caring about quality
effective engineer -- LeadDev -- 4. Communicate effectively with your team
effective engineer -- LeadDev -- 5. Build trust, autonomy, and social capital
effective engineer -- LeadDev -- 6. Understand team strategy
effective engineer -- LeadDev -- 7. Prioritize appropriately and execute independently
effective engineer -- LeadDev -- 8. Think long term (e.g. implications of decisions)
effective engineer -- LeadDev -- 9. Leave software projects better than you found them
effective engineer -- LeadDev https://www.linkedin.com/posts/addyosmani_softwareengineering-programming-effectiveness-activity-7018966411389661184-pVev
egress/ingress
emscripten
encabulator https://en.wikipedia.org/wiki/Turbo_encabulator  https://www.youtube.com/watch?v=RXJKdh1KZ0w
encoding -- binary-to-text -- risk of accidental words
encoding -- binary-to-text https://en.wikipedia.org/wiki/Binary-to-text_encoding
engineer's notions of simplicity, economies of scale, and design integrity https://en.wikipedia.org/wiki/Planned_obsolescence#History
entitlements -- non-standard offerings or commercial terms to meet their needs through high touch sales motions. High touch Sales teams work closely with our customers to understand their solution needs and buying preferences like Multi-year billed annual, ELAs, Ramp discounts. There is a significant volume of customers and revenue from such deals
epochs: a backward-compatible language evolution mechanism https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1881r0.html
error -- failure type – open / close = open = allow, close = deny, best choice depends on context https://community.opentext.com/cybersec/b/cybersecurity-blog/posts/security-fundamentals-part-1-fail-open-vs-fail-closed
error -- handling -- exceptions, error codes, monads, etc. https://www.boost.org/doc/libs/1_84_0/libs/outcome/doc/html/alternatives.html
error -- handling -- fail fast = Check input and fail on nonsensical input or invalid state as early as possible, preferably with an exception or error response that will make the exact problem clear to your caller https://opensource.com/article/17/5/30-best-practices-software-development-and-testing
error -- handling -- fail fast and loudly
error -- reuse error codes
error -- type -- domain error = out of the specification, ex. sqrt(-x) https://cplusplus.com/reference/stdexcept/domain_error/
error -- type -- logic error = errors in the internal logical of the program, such as violation of logical preconditions or class invariants https://cplusplus.com/reference/stdexcept/logic_error/
error -- type -- runtime error = errors that can only be detected during runtime https://cplusplus.com/reference/stdexcept/runtime_error/
error = failure = inability of a function to return a valid result, instead producing an error object describing the reason for the failure https://boostorg.github.io/leaf/#tutorial
ETL “extract, transform, load” = the three interdependent processes of data integration used to pull data from one database and move it to another
event loop
evolution -- "that's the old way and it sucks, do it this way now..."
evolution -- I'm old and I yell at clouds
evolution -- nothing ages faster than a (UI) framework
exceptions -- checked vs unchecked = only Java does checked, no-one followed, too much boilerplate https://en.wikipedia.org/wiki/Criticism_of_Java#Checked_exceptions
execution model https://en.wikipedia.org/wiki/Execution_model
express
extreme programming
FAANG https://www.faangfire.com/
feature flag -- also called toggle, feature control
feature flag = dynamically change the state of production
feedback loop -- speed needed
FIFO
file read
file watcher -- watchman
file watcher https://github.com/parcel-bundler/watcher
file write
finished software https://josem.co/the-beauty-of-finished-software/
finops
flatmap
flow state = deep concentration, enjoyment, and a sense of progress
flushing
flux architecture
format -- container format https://en.wikipedia.org/wiki/Resource_Interchange_File_Format
framework -- "a new framework a day"
framework -- motivations -- avoiding duplication = BUT premature abstraction
framework -- motivations -- don't like the language ex. Java style on Javascript
framework -- motivations -- underlying complexities = BUT may not be still there
framework -- spectrum = spectrum of more features v. loss of architectural control https://reactrouter.com/start/modes
FTU – First Time Use
function
function -- 1st-class object
function -- first-class function
function -- higher-order function
functional programming
GAFAM (Google, Amazon, Facebook, Apple, Microsoft)
GAFAM -- "megacap companies"
GAFAM -- Amazon https://www.vanityfair.com/news/story/inside-amazon-business-practices
garbage collector
general dependency injection and inversion of control problem
git
global variable
God object https://en.wikipedia.org/wiki/God_object
graph
GRASP (object-oriented design) = General Responsibility Assignment Software Patterns = nine fundamental principles in object design and responsibility assignment https://en.wikipedia.org/wiki/GRASP_(object-oriented_design)
GRASP -- 1 Information expert = Assign responsibility to the class that has the information needed to fulfill it
GRASP -- 2 Creator = Who creates object A? In general, Assign class B the responsibility to create object A if one, or preferably more, of the following apply...
GRASP -- 3 Controller = A controller object is a non-user interface object responsible for receiving or handling a system event
GRASP -- 4 Indirection = Assign the responsibility to an intermediate object to mediate between other components or services so that they are not directly coupled
GRASP -- 5 Low coupling = lower dependency between the classes, change in one class having a lower impact on other classes, higher reuse potential
GRASP -- 6 High cohesion = keep objects appropriately focused, manageable and understandable
GRASP -- 7 Polymorphism = responsibility for defining the variation of behaviors based on type is assigned to the type for which this variation happens
GRASP -- 8 Protected variations = Identify points of predicted variation or instability; assign responsibilities to create a stable interface around them
GRASP -- 9 Pure fabrication =
GRASP -- see also: SOLID
groupware = collaboration software = helps members of a group work better together. Groupware makes it possible for group members to easily share information and to use that information to more easily support working together.
grug brain = complexity, readability https://grugbrain.dev/
Grug Brained Developer = A layman's guide to thinking like the self-aware smol brained https://grugbrain.dev/
hallway usability testing https://en.wikipedia.org/wiki/Usability_testing#Hallway_testing
handle
hashbang (aka. shebang) https://github.com/tc39/proposal-hashbang
helping -- XY problem = wrongly asking about your attempted solution rather than your actual problem https://xyproblem.info/
historically bad ideas https://qconlondon.com/london-2009/qconlondon.com/london-2009/tracks/show_trackd04f.html?trackOID=232
Hofstadter's Law = It always takes longer than you expect, even when you take into account Hofstadter's Law https://en.wikipedia.org/wiki/Hofstadter's_law
hoisting des vars de boucle for et switch
homoiconicity https://en.wikipedia.org/wiki/Homoiconicity
hooks
hotfix
http -- ohttp "oblivious" https://support.mozilla.org/en-US/kb/ohttp-explained
hypermedia
hypertext
IAM "identity and access management"
IAM -- CIAM "Customer Identity and Access Management" = a type of identity and access management (IAM) that integrates authentication and authorization into customer-facing applications
IAM -- CIAM -- 01 Improves customer registration and login experiences while reducing the risk of account takeover (a rampant problem in the consumer space because of password reuse)
IAM -- CIAM -- 02 Offers customized and branded experiences for consumers, businesses, and enterprise customers
IAM -- CIAM -- 03 Provides a scalable solution that can support hundreds of millions of customers
IC vs management https://theengineeringmanager.substack.com/p/should-managers-still-code
IDE "You're not productive enough without a productive IDE"
IDE (Integrated Development Environment)
IDEALS
IDEALS -- 1 Interface segregation
IDEALS -- 2 Deployability (is on you)
IDEALS -- 3 Event-driven
IDEALS -- 4 Availability over consistency
IDEALS -- 5 Loose coupling
IDEALS -- 6 Single responsibility
IDEALS = principles for microservice design
idempotent = make mutations idempotent. A full retry of a partial failure shouldn’t corrupt/duplicate data.
if it ain't broken, don't fix it
IIFE https://codilime.com/blog/iffe-forgotten-javascript-pattern/
illusion of clean code = "the good news is that my code is quite beautiful and well organized, with perfectly uniform indentation and formatting, completely consistent conventions, and immaculately well factored. Any developer who is worth their salt in the language I have laid down will be able to understand, trace, and build upon my code within one day of poring over it. (If not, fire them. Trust me.)" https://blog.jpl-consulting.com/2011/03/what-happens-if-i-get-hit-by-a-bus/
immutability
inheritance -- diamond
inheritance -- prototypal
inheritance -- substitutability = an object (such as a class) may be replaced by a sub-object (such as a class that extends the first class) without breaking the program
inner-platform effect https://en.wikipedia.org/wiki/Inner-platform_effect
interface
interface -- abstract = no implementation, only to be extended (OOP)
Interface segregation principle = instead of a class interface with all possible methods clients might need, there should be separate interfaces catering to the specific needs of each type of client https://en.wikipedia.org/wiki/Interface_segregation_principle
internal developer platform (IDP) = central source of truth, golden paths, https://www.pulumi.com/docs/idp/get-started/
internal developer platform -- private registry
interpreters = make your own programming language https://craftinginterpreters.com/
Inversion of control (IoC) = programming principle whereby flow is managed in the opposite way to traditional procedural programming. With inversion of control, custom-written portions of a program receive the flow of control from a generic framework, as opposed to the traditional procedural approach whereby custom code calls into reusable libraries to take care of generic tasks. With inversion of control, the framework calls into custom, or task-specific, code
Joel test -- 01 Do you use source control?
Joel test -- 02 Can you make a build in one step?
Joel test -- 03 Do you make daily builds?
Joel test -- 04 Do you have a bug database?
Joel test -- 05 Do you fix bugs before writing new code?
Joel test -- 06 Do you have an up-to-date schedule?
Joel test -- 07 Do you have a spec?
Joel test -- 08 Do programmers have quiet working conditions?
Joel test -- 09 Do you use the best tools money can buy?
Joel test -- 10 Do you have testers?
Joel test -- 11 Do new candidates write code during their interview?
Joel test -- 12 Do you do hallway usability testing?
Joel test -- revised -- 01 Do you use Git, or some lesser source control system?
Joel test -- revised -- 02 Can you build and release in one step?
Joel test -- revised -- 03 Do you build and test before merging to master?
Joel test -- revised -- 04 Do you have a bug database?
Joel test -- revised -- 05 Do you fix bugs before writing new code?
Joel test -- revised -- 06 Do you have an up-to-date schedule?
Joel test -- revised -- 07 Do you write a spec before writing code?
Joel test -- revised -- 08 Do programmers have quiet working conditions free of interruptions?
Joel test -- revised -- 09 Do you use the best development tools money can buy?
Joel test -- revised -- 10 Do you have human testers?
Joel test -- revised -- 11 Do you do automated testing?
Joel test -- revised -- 12 Do new candidates write code as part of the hiring process?
Joel test -- revised -- 13 Do you watch people actually try to use your software?
Joel test -- revised https://dev.to/checkgit/the-joel-test-20-years-later-1kjk
Joel test https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/
jump/goto
kebab-case vs snake etc
kill switch
KISS
KTLO
l10n (localization) = process of adapting a product to local markets (for example, by i18n'ing it)
l10n -- g11n = Globalization
l10n -- i18n (internationalization) = planning and implementing products and services so that they can be adapted easily localized to specific languages and cultures
l10n -- i18n -- blocking languages = core business
l10n -- i18n -- exclusions -- admin
l10n -- i18n -- exclusions -- dev doc / portal = really hard - you need engineers fluent in both languages (and the tools/sdks/etc)
l10n -- i18n -- ICU format https://formatjs.github.io/
l10n -- i18n -- pseudolocalization = [Lóôõrēĕėęm iìíîpsúûüũm]
l10n -- i18n -- text size change https://www.w3.org/International/articles/article-text-size
l10n -- truly local = more than just translation
lang -- Bend = massively parallel, high-level programming language https://github.com/HigherOrderCO/Bend
lang -- Clojure ~lisp https://clojure.org/
lang -- go
lang -- go -- advocacy https://github.com/microsoft/typescript-go/discussions/411
lang -- JS -- engines http://developer.telerik.com/featured/a-guide-to-javascript-engines-for-idiots/
lang -- JS -- equality
lang -- JS -- interview http://www.toptal.com/javascript/interview-questions
lang -- JS -- interview https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-6fa6bdf5ad95
lang -- JS -- parseInt http://stackoverflow.com/questions/17106681/parseint-vs-unary-plus-when-to-use-which/17106702#17106702
lang -- JSON
lang -- JSX – Javascript XML, from React
lang -- Rust https://www.rust-lang.org/
lang -- Tcl = very compact, often embedded https://en.wikipedia.org/wiki/Tcl
lang -- wasp = high level website / SaaS https://wasp.sh/
language -- type -- markup = a text-encoding system which specifies the structure and formatting of a document and potentially the relationships among its parts.[1] Markup can control the display of a document or enrich its content to facilitate automated processing https://en.wikipedia.org/wiki/Markup_language
language features -- contract enforcement
language features -- data hiding
language features -- encapsulation
language features -- polymorphism
language interprété types simples / types par référence
Language Server Index Format (LSIF)
Language Server Protocol https://microsoft.github.io/language-server-protocol/
language tags
languages -- configuration
languages -- configuration -- https://github.com/bazelbuild/starlark/
languages -- generations = (disputed) https://en.wikipedia.org/wiki/Programming_language_generations
languages -- higher level -- wrongly against = Von Neumann https://www.reddit.com/r/compsci/comments/zx1eu8/von_neumann_was_admonishing_people_who_built/
languages -- trends
languages -- weekend https://stackoverflow.blog/2017/02/07/what-programming-languages-weekends/
late/lazy evaluation vs fail fast
layer -- abstraction
layers
layers -- shearing
lazy-loading
leaking
learning -- https://roadmap.sh/
legacy code = code without good testing coverage that we don’t recall writing https://www.booktopia.com.au/working-effectively-with-legacy-code-michael-feathers/book/9780131177055.html
let's deploy to production https://www.youtube.com/watch?v=5p8wTOr8AbU
LIFO
linked list
linting
linux
linux -- eBPF https://ebpf.io/what-is-ebpf/
locality
locality -- conflict locality = reducing conflicts on close changes, ex. enforcing trailing commas, sorting...
locality -- of behaviour "LoB" https://htmx.org/essays/locality-of-behaviour/
lodash
log
long-term support (LTS)
loop
loop - breaking out of
lore -- NSC "Nocturnal Self Correction" = improved performance after long weekends
LTS, maintenance LTS, active LTS https://nodejs.org/en/about/previous-releases
LxTHW "Learn X The Hard Way" Philosophy = has students do exercises, focuses on practice and rote repetition, and instills an attitude that to learn anything one must be prepared to work at it https://github.com/georgeowen1993/learn-git-the-hard-way/
magic number
manifest
map
math https://math4devs.com/
MDN
media types https://www.iana.org/assignments/media-types/media-types.xhtml
memory -- heap
memory -- stack
memory safe -- "about 40% of all security problems in curl can be blamed on us using C instead of a memory-safe language. 50% of the high/critical severity ones" https://daniel.haxx.se/blog/2024/12/12/a-twenty-five-years-old-curl-bug/comment-page-1
memory safety -- borrow-checking system = Rust https://thenewstack.io/c-committee-divided-on-memory-safety-plans/
memory safety -- profiles https://thenewstack.io/c-committee-divided-on-memory-safety-plans/
merge queue
message passing https://en.wikipedia.org/wiki/Message_passing
MFA -- 2FA
MFA -- double auth
microcode
microprocessor https://firstmicroprocessor.com/
middleware
migrations
mission-critical software
mixins -- considered harmful https://legacy.reactjs.org/blog/2016/07/13/mixins-considered-harmful.html
mocha / chai
monads
monitoring = observing systems, collecting metrics, evaluating those metrics over time, and then using them to make decisions or take actions
monolith = over time become poorly structured, containing many different, sometimes competing conventions. These conventions and “styles” sprawl throughout the monolith and make it difficult to understand what is going on. Because structures are built with different conventions, to work in the monolith safely, you have to examine everything to make sure you understand this instance of this pattern. It’s not safe to assume anything. This, combined with the lack of boundaries in the monolith means that every change incurs a huge cost in examination and understanding before it can be safely implemented. This skews developer performance to tenure - the longer you have been staring at the code, the more you have wrapped your head around and the faster you can go (mostly). New developers should not be worried about the time it takes to be effective in the monolith - it's the monolith’s fault, not yours."
monolith refactoring -- 1. Move code into a good module structure, unpicking code and dependencies along the way
monolith refactoring -- 2. Understand the domain and build good and scalable abstractions in the form of new APIs which are backed directly by the database (no managers, etc.)
monolith refactoring -- 3. Replace usage of the old mess with the new APIs, validate consistency, etc.
monorepo -- boundaries = don't conflate the main codebase vs things needed to run the build vs things produced by the build
monorepo -- megarepo
multi tenant -- isolation
MVC (Model View Controller)
namespace
naming -- must leave no room for interpretation
naming -- must not overload pre-existing, well known meanings
naming -- must use American English
naming -- should be chosen based on essential function, rather than UI presentation or internal-only conventions
naming -- should be consistent
naming -- should be precise
naming -- should be purposeful
naming -- should be short and simple
naming https://ntietz.com/blog/when-to-use-cute-names-or-descriptive-names/
no silver bullet in engineering = we cannot expect ever to see two-fold gains every two years https://en.wikipedia.org/wiki/No_Silver_Bullet
node.js -- principles https://www.platformatichq.com/node-principles
not invented here https://en.wikipedia.org/wiki/Not_invented_here
npm
nyan cat
o11y observability https://o11y.eu/blog/what-is-o11y/
object
object model = memory, working representation ex. DOM, CCSOM...
OOP -- against https://paulgraham.com/noop.html
OOP -- fake strengths -- abstraction -> any interface
OOP -- fake strengths -- code re-use
OOP -- fake strengths -- Dependency inversion principle
OOP -- fake strengths -- design benefits
OOP -- fake strengths -- encapsulation = Once an Object is created, knowledge of its implementation is not necessary for its use + Objects have the ability to hide certain parts of themselves from programmers. This prevents programmers from tampering with values they shouldn’t. Additionally, the object controls how one interacts with it, preventing other kinds of errors. For example, a programmer (or another program) cannot set the width of a window to -400.
OOP -- fake strengths -- inheritance -> use composition instead https://r.je/you-do-not-need-inheritance-oop
OOP -- fake strengths -- Interface segregation principle
OOP -- fake strengths -- Open/closed principle
OOP -- fake strengths -- polymorphism
OOP -- fake strengths -- Single responsibility principle
OOP -- fake strengths -- software maintenance
OOP -- fake strengths -- Static type checking -> not related to OOP
OOP -- fake strengths https://medium.com/@jacobfriedman/object-oriented-programming-is-an-expensive-disaster-which-must-end-2cbf3ea4f89d
OOP -- layer https://en.wikipedia.org/wiki/Layer_(object-oriented_design)
OOP -- problems -- cross cutting concerns, diamond
OOP -- problems -- encourages promiscuous sharing of mutable state
OOP -- problems -- side effects
opaque = data, types
optim des || et && effet de bord
optimization -- solutions -- Accept a less precise solution
optimization -- solutions -- Use a better algorithm
optimization -- solutions -- Use a better data-structure
optimization -- solutions -- Use a lower-level system
optimization -- we believe that we can easily know how to make the slow parts of a program run faster.
optimization -- we believe that we can easily know where a program spends most of its time.
optimization https://tratt.net/laurie/blog/2023/four_kinds_of_optimisation.html
ORM (Object-Relational Mapping)
ORM https://github.com/typeorm/typeorm
orthogonality https://en.wikipedia.org/wiki/Orthogonality_(programming)
overengineering https://blog.matt-rickard.com/p/stop-overengineering
ownership
ownership -- CODEOWNERS
ownership -- if you build it, you own it
ownership -- shift left = lower levels own
pair-programming
partial application = creating a new version of a function with one or more of its parameters bound to some predefined value
pattern -- anti -- lava flow = code written under sub-optimal conditions is deployed into a production environment and subsequently expanded upon while still in a developmental state https://en.wikipedia.org/wiki/Lava_flow_(programming)
pattern -- matching = checking a given sequence of tokens for the presence of the constituents of some pattern. In contrast to pattern recognition, the match usually has to be exact: "either it will or will not be a match." The patterns generally have the form of either sequences or tree structures. Uses of pattern matching include outputting the locations (if any) of a pattern within a token sequence, to output some component of the matched pattern, and to substitute the matching pattern with some other token sequence (i.e., search and replace).
pattern -- recognition = same but not exact match
patterns -- anti -- dependency threading = aka. prop drilling = parent component takes props for the sole purpose of passing them to a nested component -> fix it by passing the pre-wired nested component
peer review, green build = condition to merge a code change
perf
perf -- as a feature
perf -- only pay for what you need
performance -- analysis https://www.brendangregg.com/methodology.html
permissions -- AppArmor https://en.wikipedia.org/wiki/AppArmor
personal data
personal data (PD)
personal data -- processing -- high-risk -- automated decision-making (e.g., rejecting employment based on automatic scoring)
personal data -- processing -- high-risk -- children's data
personal data -- processing -- high-risk -- enriching or matching data with a third party’s data sets
personal data -- processing -- high-risk -- machine learning (unless it is a pre-approved use case)
personal data -- processing -- high-risk -- monitoring of people/employees (e.g., CCTV footage or productivity metrics)
personal data -- processing -- high-risk -- processing people’s data without their knowledge, consent or reasonable expectation (the person doesn’t know we have their data).
personal data -- processing -- high-risk -- profiling (building a profile of a person based on different pieces of personal data, such as user behaviour)
personal data -- processing -- high-risk -- retargeting (sharing with third parties for marketing / re-marketing purposes)
personal data -- processing -- high-risk -- sensitive data
personal data -- processing -- high-risk -- tracking precise user location (geolocation)
personal data -- sensitive
PHP (recursive acronym for PHP: Hypertext Preprocessor)
pipeline express: success / error / next / send
plain old -- java object / component object (POJO/POCO) = plain data container objects that don’t depend on external libraries
platform engineering -- backstage, pulumi
platform engineering = approach where one or more teams (often referred to as the platform engineering team or the platform team) build a comprehensive set of shared tools and services (aka “the platform”) to help development teams develop, deploy, and operate cloud infrastructure on a self-service basis. This includes cloud infrastructure, container orchestration platforms, databases, networking, monitoring, code repositories, and deployment pipelines. https://www.pulumi.com/what-is/what-is-platform-engineering/
pointer
polyfill
polyfill -- shim vs polyfill vs ponyfill
polymorphism https://en.wikipedia.org/wiki/Polymorphism_(computer_science)
postgres -- job queue https://github.com/timgit/pg-boss
practices -- best vs. standard
preprocessor macros
principle of least surprise / principle of least astonishment https://en.wikipedia.org/wiki/Principle_of_least_astonishment
privacy
privacy -- collect and use someone's info respectfully
privacy -- Data Retention and Deletion Policy
privacy -- Privacy Impact Assessments (PIA)
privacy -- regulations/compliance AND expectations
privacy -- right of access
privacy -- right to correct
privacy -- right to delete
privacy -- right to portability
privacy -- right to restrict
programmer resistance https://blog.jpl-consulting.com/2010/07/programmer-resistance/
programming -- application
programming -- systems https://en.wikipedia.org/wiki/Systems_programming
programming languages -- top -- 2024 https://spectrum.ieee.org/top-programming-languages-2024
programming model https://en.wikipedia.org/wiki/Programming_model
programming paradigm -- declarative programming
programming paradigm -- functional programming
programming paradigm -- imperative programming
programming paradigm -- object oriented
programming paradigm -- reactive
promises -- deferred
promises -- pipelining https://capnproto.org/rpc.html
prompt
protocol buffers (protobuf) => see data interchange format
prototypes
proxy
pull vs push (IoC, promises vs observables...)
pure https://react.dev/learn/keeping-components-pure
questions for a new technology -- 1 What problem are we trying to solve? (Tech should never be introduced as an end to itself)
questions for a new technology -- 2 How could we solve the problem with our current tech stack? (If the answer is we can’t, then we probably haven’t thought about the problem deeply enough)
questions for a new technology -- 3 Are we clear on what new costs we are taking on with the new technology? (monitoring, training, cognitive load, etc)
questions for a new technology -- 4 What about our current stack makes solving this problem in a cost-effective manner (in terms of money, people or time) difficult?
questions for a new technology -- 5 If this new tech is a replacement for something we currently do, are we committed to moving everything to this new technology in the future? Or are we proliferating multiple solutions to the same problem? (aka “Will this solution kill and eat the solution that it replaces?”)
questions for a new technology -- 6 Who do we know and trust who uses this tech? Have we talked to them about it? What did they say about it? What don’t they like about it? (if they don’t hate it, they haven’t used it in depth yet)
questions for a new technology -- 7 What’s a low risk way to get started?
questions for a new technology -- 8 Have you gotten a mixed discipline group of senior folks together and thrashed out each of the above points? Where is that documented?
questions for a new technology https://kellanem.com/notes/new-tech
queue
RAM
ratcheting https://robertgreiner.com/continuous-code-improvement-using-ratcheting/ https://leaddev.com/building-better-software/introducing-quality-ratchets-tool-managing-complex-systems
rate limiting
rate limiting -- cost based
RDF -- SPARQL = query language for querying RDF data
React
reactive programming
recursion
red / blue deployment -- compatibility window = period, measured either in elapsed time or number of releases, where all versions of a component released during this window must be compatible with all components of the current version, and vice versa.
regex - 2x problems = Some people, when confronted with a problem, think “I know, I'll use regular expressions.” Now they have two problems. https://regex.info/blog/2006-09-15/247
regex https://regexlearn.com/
regex – email https://colinhacks.com/essays/reasonable-email-regex
register
release channels = offer a trade-off between feature availability and stability https://support.google.com/chrome/a/answer/9027636?hl=en https://cloud.google.com/kubernetes-engine/docs/concepts/release-channels
release channels https://techcrunch.com/2020/06/15/microsoft-moves-its-windows-10-insider-program-from-rings-to-release-channels/
release phases = alpha → beta → private beta → limited beta → public beta → general availability → deprecated → sunset https://vercel.com/docs/release-phases
resource -- deletion -- hard
resource -- deletion -- soft = marking a resource as unavailable, rather than removing it from the datasource completely. Such resources will be said to be soft deleted and should be deleted at a later date. Allow easier restoration in case of an error/attack = undelete
resource -- deletion -- undelete = Undeleting shouldn’t be triggered by users, but instead by trusted entities such as support, security
resource -- subresource = delete them with parent
resource -- trash can + untrashing = known feature, different from soft deletion
Resource Description Framework (RDF) = express statements as triples in the form of subject-predicate-object
REST (REpresentational State Transfer)
REST HTTP = How to GET a Cup of Coffee https://www.infoq.com/articles/webber-rest-workflow/
Reverse Polish Notation
revisions
rewrite trap https://medium.com/@herbcaudill/lessons-from-6-software-rewrite-stories-635e4c8f7c22 https://skamille.medium.com/avoiding-the-rewrite-trap-b1283b8dd39e
RFC (Request For Comments) https://rfc.fyi/
RFC 2119 terminology = must, must not, should, should not, and may. The terms prefer and avoid correspond to should and should not, respectively. Imperative and declarative statements are prescriptive and correspond to must.
robustness -- principle (beware bad effects) https://en.wikipedia.org/wiki/Robustness_principle
robustness https://en.wikipedia.org/wiki/Robustness_principle
rollback
rolling deploy
RPC -- advocacy https://blog.cloudflare.com/javascript-native-rpc/
rpc -- deadline https://protobuf.dev/programming-guides/api/
RPC -- solution -- protocol = ex. https://capnproto.org/rpc.html
RPC -- solution -- TS https://trpc.io/docs/concepts intro https://colinhacks.com/essays/painless-typesafety
rule of composition https://www.linfo.org/rule_of_composition.html
rule of silence https://www.linfo.org/rule_of_silence.html
Rust -- TRACTOR "Translating All C to Rust"
SAAS -- Shared responsibility model
safety -- defense in depth = incident only when all the layers failed (rare but happens)
scatter/gather (datastreams)
schema
schema explorer
science -- Sokal affair = hoax leftist https://en.wikipedia.org/wiki/Sokal_affair
SCM (Source Control Management)
scope
script
Scripts -- should be written using the project main language https://joaomagfreitas.link/scripts-should-be-written-using-the-project-main-language/
scrum
SDK (Software Development Kit)
security -- (see dedicated file)
semaphore
semver
semver -- advanced example https://react.dev/community/versioning-policy (see also TS)
semver -- alternatives -- compatibility dates = https://developers.cloudflare.com/workers/configuration/compatibility-dates/
semver -- loose vs strict = "spirit of semver" https://www.learningtypescript.com/articles/why-typescript-doesnt-follow-strict-semantic-versioning https://news.ycombinator.com/item?id=24224975
semver -- major -> minor -> patch
semver -- not an obligation!
semver -- preparing a major with a subpath https://github.com/colinhacks/zod/issues/4371
SHA (Secure Hash Algorithm)
shaving the yak
show me the code!
shrinkwrap
side effects (avoid them!)
significant change
silly "make software silly again" https://www.linkedin.com/posts/addyosmani_softwareengineering-programming-javascript-ugcPost-7296794102514229248-m976
simple average
Singe Source of Truth (SSOT) / single point of truth (SPOT) = https://en.wikipedia.org/wiki/Single_source_of_truth
single executable application "SEA" -- node https://codesnip.sh/posts/building-standalone-nodejs-executables
single source of truth
site-specific browser https://en.wikipedia.org/wiki/Site-specific_browser
SLI (Service Level Indicator) = a measurement of how reliable or performant a Capability is. Example: “time it takes to create a ticket”
SLO (Service Level Objective) = (proactive) A target set on the SLI. Failing to hit the target == unhappy customer! Example: “Jira ticket created in less than 1s”
SME Subject Matter Expert
SOAP (Simple Object Access Protocol)
software acceptance = How Is Technology Accepted? https://www.dreamsongs.com/Files/AcceptanceModels.pdf
software crisis https://en.wikipedia.org/wiki/Software_crisis
software engineering is programming integrated over time — Software Engineering at Google: Lessons Learned from Programming Over Time
SOLID
SOLID -- 1 Single responsibility principle (SRP) https://en.wikipedia.org/wiki/Single_responsibility_principle
SOLID -- 2 Open–closed principle (OCP) https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle
SOLID -- 3 Liskov substitution principle https://en.wikipedia.org/wiki/Liskov_substitution_principle
SOLID -- 4 Interface segregation principle https://en.wikipedia.org/wiki/Interface_segregation_principle
SOLID -- 5 principle https://en.wikipedia.org/wiki/Dependency_inversion_principle
SOLID -- critique https://www.tedinski.com/2019/04/02/solid-critique.html
solution -- bazel https://github.com/bazelbuild/bazelisk
space shuttle disasters -- Challenger = https://en.wikipedia.org/wiki/Space_Shuttle_Challenger_disaster
space shuttle disasters -- Columbia = https://en.wikipedia.org/wiki/Space_Shuttle_Columbia_disaster
spec
SSH (Secure Shell)
stack overflow
standard deviation
state
state -- making impossible states impossible https://medium.com/elm-shorts/how-to-make-impossible-states-impossible-c12a07e907b5
state -- management
state -- stateless
stats course https://www.youtube.com/playlist?list=PLltdM60MtzxNwhL4sg7swFFlUlH7EEy7H []
status codes
stick to boring architecture for as long as possible https://addyosmani.com/blog/boring-architecture/
stories to help you grow as a software developer https://medium.com/@MediumStaff/list/stories-to-help-you-grow-as-a-software-developer-b1d913188c20
straw-dog proposal = (jargon) a brainstormed simple draft proposal intended to generate discussion of its disadvantages and to spur the generation of new and better proposals https://en.wikipedia.org/wiki/Straw_man_proposal#Software_development
streams
style guides https://google.github.io/styleguide/
superapp
Sustainable Architectural Decisions https://adr.github.io/
system boundaries = a publicly exposed interface that third-party developers are going to use. It’s the inability to make breaking changes because you have external users to support that really defines a boundary. As a result, you have to pay special attention to get the design of a system boundary right—it’s not easy to make changes in the future. Boundaries are more important than other parts of our programs that we can refactor at will. https://www.tedinski.com/2018/02/06/system-boundaries.html
system call
tainting an object https://react.dev/reference/react/experimental_taintObjectReference
tech debt -- buckets -- 1 strategic = directly impacts business outcomes: what specific user or business capabilities will be blocked? what's our timeline before we hit critical constraints? what's the minimum investment needed to unblock progress?
tech debt -- buckets -- 2 tactical = slows delivery speed: focus on velocity metrics: "our deploy time has increased from 15 minutes to 4 hours in the last quarter""bug fix turnaround has gone from 2 days to 2 weeks""feature development estimates have doubled"
tech debt -- buckets -- 3 brand = the product works but doesn't exude quality/trust, ex. slow, clunky, "infantile"
tech debt -- buckets -- 4 cosmetic = affects code quality but not outcomes
tech debt -- origin -- accidental - e.g. bugs due to human error that unknowingly increases the cost of future work.
tech debt -- origin -- deliberate - e.g. optimising for short term delivery, knowing it increases the cost of future work.
tech debt -- origin -- incidental - e.g. organic changes in complexity over time that increases the cost of future work.
tech specs https://hybridhacker.email/p/how-to-write-great-tech-specs
Temporal Dead Zone (TDZ)
temporary solutions https://80.lv/articles/this-30-year-old-windows-feature-was-created-as-a-temporary-solution/
tenant -- isolation -- sandboxing / isolates / individual processes / individual VMs / individual containers
tenant -- multi-tenant
testing -- fixture -- general = setup designed to hold the OUT in place and allow it to be tested by being subjected to controlled test signals https://en.wikipedia.org/wiki/Test_fixture
testing -- fixture = (also called "test context") setup of state and input data designed to allow the OUT to be tested by being subjected to controlled test signals, ex. a fake database with data https://en.wikipedia.org/wiki/Test_fixture#Software
testing -- mutation testing = tests your test suite by introducing a bug into the code under test, running the tests, and verifying the tests failed (i.e. that your tests are good enough to catch the bug) https://sentry.engineering/blog/js-mutation-testing-our-sdks https://stryker-mutator.io/
testing -- Object Under Test (OUT)
testing -- property based = instead of “it works for this case”, it’s “it works for any arbitrary input of this pattern” (e.g. “all integers”, “all alphanumeric strings”, “all List<Foo>s of length less than 10”) https://en.wikipedia.org/wiki/Property_testing
testing -- TDD
testing -- test double -- 01 dummy = objects are passed around but never actually used. Usually they are just used to fill parameter lists
testing -- test double -- 02 fake = have working implementations, but usually take some shortcut which makes them not suitable for production (an in memory database is a good example)
testing -- test double -- 03 stub = provide canned answers to calls made during the test, usually not responding at all to anything outside what's programmed in for the test.
testing -- test double -- 04 spy = stubs that also record some information based on how they were called. One form of this might be an email service that records how many messages it was sent.
testing -- test double -- 05 mock = objects pre-programmed with expectations which form a specification of the calls they are expected to receive.
testing -- test double = dummy, fake, stub, spy, mock - Every class or object created is a fake. It is a mock if you assert against it. Otherwise it is a stub. https://stackoverflow.com/questions/3459287/whats-the-difference-between-a-mock-stub
testing -- test double https://martinfowler.com/articles/mocksArentStubs.html
The Mythical Man-Month
the room https://lethain.com/getting-in-the-room/
this
thread
threads -- virtual https://docs.oracle.com/en/java/javase/21/core/virtual-threads.html
time-travel https://docs.snowflake.com/en/user-guide/data-time-travel
tool -- curl = https://curl.se/
tool -- grep -- ast-grep https://ast-grep.github.io/
tool -- http://devdocs.io/
tool -- sprawl
tracing -- distributed https://zipkin.io/
tracing https://andydote.co.uk/2023/09/19/tracing-is-better/
transparent functional reactive programming "TFRP" = MobX concept
transpilation / transpiler / transpiling
transpiler -- vs compiler
transpiler = translates code from one language to another in a human-readable form. Therefore, you can still read the transpiled files.
tree
tree -- walk
tree shaking https://en.wikipedia.org/wiki/Tree_shaking
TUIs (terminal user interfaces) https://ratatui.rs/
type -- signature (type annotation) = defines the inputs and outputs of a function, subroutine or method
typecast
types
types -- abstract (class) = base (or common def) not supposed to be used "as is" but extended
types -- abstract vs. concrete = may not be relevant, ex. TypeScript, and "duck typing"
types -- casting -- up/down
types -- concrete type/class = vs abstract, the one supposed to be actually used
types -- contextual typing = occurs when the context of an expression gives a hint about what its type might be https://github.com/microsoft/TypeScript/wiki/FAQ#why-am-i-getting-an-error-about-a-missing-index-signature
types -- duck typing
types -- erasure https://github.com/microsoft/TypeScript/wiki/FAQ#what-is-type-erasure https://en.wikipedia.org/wiki/Type_erasure
types -- interface = An interface decouples what needs to be implemented from how it is implemented
types -- Liskov substitution principle (L of SOLID) https://en.wikipedia.org/wiki/Liskov_substitution_principle
types -- method bivariance https://github.com/microsoft/TypeScript/wiki/FAQ#why-method-bivariance
types -- nominal https://github.com/Microsoft/TypeScript/issues/202
types -- parameter arity variance https://github.com/microsoft/TypeScript/wiki/FAQ#parameter-arity-variance-is-correct
types -- parameter contravariance https://github.com/KiaraGrouwstra/typical?tab=readme-ov-file#similar-projects
types -- slow types https://jsr.io/docs/about-slow-types (also in Swift: The compiler is unable to type-check this expression in reasonable time)
types -- structural typing = two types are compatible if their members are compatible https://github.com/microsoft/TypeScript/wiki/FAQ#why-method-bivariance
types -- substitutability https://github.com/microsoft/TypeScript/wiki/FAQ#substitutability
types -- subtyping -- circle/ellipse or square/rectangle problem "hierarchical taxonomies are difficult to make universal" https://en.wikipedia.org/wiki/Circle%E2%80%93ellipse_problem
types -- subtyping -- contravariance
types -- subtyping -- covariance
types -- subtyping -- invariants = cannot be weakened in the subtype
types -- subtyping -- polymorphism
types -- subtyping -- postconditions = cannot be weakened in the subtype
types -- subtyping -- preconditions = cannot be strengthened in the subtype
types -- subtyping https://en.wikipedia.org/wiki/Liskov_substitution_principle
types -- systems -- "modern" https://reasonablypolymorphic.com/blog/protos-are-wrong/
types -- systems -- role -- (disputable pre-semver citation!) the main challenge in real-world software engineering is not writing code but changing code once it is written and deployed. In general, type systems can be both helpful and harmful when it comes to changing code -- type systems are invaluable for detecting problems introduced by a change, but an overly-rigid type system can be a hindrance if it means common types of changes are difficult to make. https://news.ycombinator.com/item?id=18188519
typescript -- performance https://trpc.io/blog/typescript-performance-lessons
typography -- quotes https://smartquotesforsmartpeople.com/
UI layout algorithms https://www.youtube.com/watch?v=by9lQvpvMIc
uid -- use strings = "2^64 isn’t as big as it used to be" https://protobuf.dev/programming-guides/api/
unicode -- byte-order mark
unicode -- encoding -- WTF-8 "wobbly" (not needed with normalization / well formed) https://simonsapin.github.io/wtf-8/
unicode -- encoding https://simonsapin.github.io/wtf-8/#motivation
unicode -- FAQ https://unicode.org/faq/utf_bom.html#utf16-2
unicode -- is hard https://mcilloni.ovh/2023/07/23/unicode-is-hard/
unicode -- terminology https://simonsapin.github.io/wtf-8/#terminology
Unix philosophy (OUTDATED -> use JSON ;)) https://en.wikipedia.org/wiki/Unix_philosophy
Unix philosophy -- (much more) https://en.wikipedia.org/wiki/Unix_philosophy
Unix philosophy -- A.01 Make each program do one thing well. To do a new job, build afresh rather than complicate old programs by adding new "features"
Unix philosophy -- A.02 Expect the output of every program to become the input to another, as yet unknown, program. Don't clutter output with extraneous information. Avoid stringently columnar or binary input formats; Don't insist on interactive input
Unix philosophy -- A.03 Design and build software, even operating systems, to be tried early, ideally within weeks. Don't hesitate to throw away the clumsy parts and rebuild them
Unix philosophy -- A.04 Use tools in preference to unskilled help to lighten a programming task, even if you have to detour to build the tools and expect to throw some of them out after you've finished using them
untrusted code
uptime / downtime
use boring technology
use strict
User Generated Content (UGC)
UX (User Experience)
validate everything
validation = "Does this input data contain the right stuff?" see zod
vaporware
variables pointer / natives
vendoring https://htmx.org/essays/vendoring/
vibe coding https://x.com/karpathy/status/1886192184808149383
virtual private cloud (VPC)
web assembly (asm.js)
WebAuth
Wirth's law = software systems grow faster in size and complexity than methods to handle complexity are invented. software is getting slower more rapidly than hardware is becoming faster. https://en.wikipedia.org/wiki/Wirth%27s_law
WORA "write once, run anywhere" https://en.m.wikipedia.org/wiki/Write_once,_run_anywhere
WORA -- Write Once, Debug Everywhere = because of subtle incompatibilities
worse is better https://www.dreamsongs.com/WorseIsBetter.html
XML
XML (Extensible Markup Language)
xml - zalgo is tony the pony = You can't parse [X]HTML with regex https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454
XSLT
XSS (Cross-site scripting)
YAGNI (you aren't gonna need it) -- Too general too soon https://frontendatscale.com/issues/15/
yaml -- NO https://noyaml.com/
yet another guideline I need to follow (YAGINTF)
you build it, you run it
