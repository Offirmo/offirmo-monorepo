
.o⋄widthꘌ100pc {
	width: 100%;
}
.o⋄heightꘌ100pc {
	height: 100%;
}


/** fully occupy the viewport, even on non-rectangular "inset" screens
 * PREREQUISITE parent containers must be clean of anything but content (no margin, no padding, no border)
 */
:root {
	/* What unit should we use?
	 * -  %       🙅 NO we don't want relative, we want absolutes
	 * -  vw,  vh 🙅 NO because of mobile iOs, this is the reason dv, sv and lv where created. full story: https://nicolas-hoizey.com/articles/2015/02/18/viewport-height-is-taller-than-the-visible-part-of-the-document-in-some-mobile-browsers/
	 * let's review the advance ones:
	 * - svw, svh 🙅 NO we want the FULL = biggest viewport possible, not the small one
	 * - dvw, dvh ❓ yes IN THEORY
	 *               👍 works in Safari mobile, UA stays visible = not perfect (we could use more screen) however there is no strange scroll ✅
	 *               👎 Does NOT work when we pin the app to the home screen with no UA interface :-( (seen 2024/04 iOs 17.4.1 iPhone 14)
	 * - lvw, lvh ❓ no IN THEORY
	 *               👎 on Safari Mobile, this causes a scrollbar to appear on start when UA visible, then on scroll the UA disappear and we're left with a horrible state (seen 2024/04 iOs 17.4.1 iPhone 14) TODO could we recover from that with a programmatic scroll?
	 *               👍 works on pinned app with no UA
	 * 🤦so we settle on the "safest" = dvh, considering "pinned" is the rarest case. We'll use a bit of JS to tweak in this case.
	 */
	--o⋄full-viewport__width: 100dvw;
	--o⋄full-viewport__height: 100dvh;
}
*:has(.o⋄full-viewport), *:has(.o⋄usable-viewport) {
	margin: 0;
	padding: 0;
	border: initial;
}
.o⋄full-viewport, *:has(.o⋄usable-viewport) {
	max-width: unset; /* first disable a common technique of limiting width to ~60ch that may have been applied by some other CSS */

	width: var(--o⋄full-viewport__width);
	height: var(--o⋄full-viewport__height);

	/* In order to get a true fullscreen when pinned on iPhone
	 * - position must NOT be "fixed", or it strangely crops to the small viewport! (2023/11 iOs 16.6.1 iPhone 14)
	 *   - absolute is ok
	 * - height MUST be 100lvh; (see height above)
	 *
	 * If :root has 0 padding, margin & border, no need to explicitly position, BUT:
	 * - if the first child has a margin, it collapses with the parent!
	 * Thus it's safer to position.
	 */
	position: absolute;
	top: 0;
	left: 0;

	/* usually what we want when going full screen */
	overflow: hidden;
}


/* Safe area without any inset or title bar
 * XXX position absolute requires containing block (= parent) to be absolute or full
 * so need a parent full viewport!
 */
.o⋄usable-viewport {
	position: absolute;

	/* Top: this assume that the title bar (if any) is on top
	 * Can it not be the case??
	 */
	top: calc(var(--safe-area-inset-top) + var(--titlebar-area-y) + var(--titlebar-area-height));

	right: var(--safe-area-inset-right);

	bottom: var(--safe-area-inset-bottom);

	left: var(--safe-area-inset-left);
}


/* DEPRECATED "A safer way to vertically fill the viewport"
 * mentioning for historical reasons
 * https://piccalil.li/quick-tip/safe-viewport-height/
 */


/* Helps a children to size itself to its parent
 * particularly useful for images
 * REQUIRES parent to be "positioned" (for ex. position: relative)
 */
.o⋄fill-parent {
	/* this well known centering technique https://stackoverflow.com/a/22760896/587407
	 * is the one that adds the fewer requirements on the consumer:
	 * It only requires the parent to be "positioned" (for ex. position: relative)
	 */
	position: absolute;
	inset: 0;
	width: 100%;
	height: 100%;
}
