import assert from 'tiny-invariant'
import { Immutable } from '@offirmo-private/ts-types'
import * as RichText from '@offirmo-private/rich-text-format'

import { Book, BookCover, BookPage, PageReference } from './types.js'
import { isê“½Book, isê“½BookCover } from './types--guards.js'
import { getê“½BookPage, getê“½BookPageâµ§chain } from './selectors.js'
import { PAGE_REFERENCEâµ§SEPARATOR } from './consts.js'

/////////////////////////////////////////////////

const DEBUG = false

/////////////////////////////////////////////////

// TODO needed?
function renderê“½Bookâµ§Title(
	cover: Immutable<BookCover>, // reminder that Book inherit from BookCover
	options: {} = {},
): RichText.Node {
	if (DEBUG) console.group(`renderê“½Bookâµ§Title`)
	if (DEBUG) console.log(cover)

	assert(isê“½BookCover(cover), `should be a book cover!`)

	let builder = RichText.fragmentâµ§inline()
		.pushText(cover.title)

	cover.subtitles?.forEach(subtitle =>
		builder = builder.pushHeading(subtitle)
	)

	if (cover.hints?.pages_count)
		builder.pushText(`${cover.hints?.pages_count} pages`)

	if (DEBUG) console.groupEnd()

	return builder.done()
}


function renderê“½BookCover(
	cover: Immutable<BookCover>,
	options: {} = {},
): RichText.Node {
	if (DEBUG) console.group(`renderê“½BookCover`)

	//console.log(cover)
	assert(isê“½BookCover(cover), `should be a book cover!`)

	// TODO use sub-functions for titles and sub-titles?

	let builder = RichText.fragmentâµ§block()
		.pushHeading(
			[
				cover.hints?.emoji || 'ðŸ“–',
				cover.title
			].join(' ')
		)

	cover.subtitles?.forEach(subtitle =>
		builder = builder.pushHeading(subtitle)
	)

	if (cover.hints?.pages_count)
		builder.pushText(`${cover.hints?.pages_count} pages`)

	if (DEBUG) console.groupEnd()

	return builder.done()
}


function renderê“½BookPage(
	book: Immutable<Book>,
	page_ref: PageReference,
): RichText.Node {
	if (DEBUG) console.group(`renderê“½BookPage`)
	if (DEBUG) console.log('book=', book)
	if (DEBUG) console.log('reference=', page_ref)

	assert(isê“½Book(book), `should be a book!`)

	const chain = getê“½BookPageâµ§chain(book, page_ref)
	const page = chain.page

	let builder = RichText.fragmentâµ§block()

	builder.pushHeading(book.title)

	chain.steps.forEach((step, index) => {
		const { book_part, keysâµ§allâµ§ordered, keyâµ§selected} = step
		const key_index = keysâµ§allâµ§ordered.indexOf(keyâµ§selected)
		builder.pushBlockFragment(`${book_part.parts_type || 'page'} ${key_index+1}/${keysâµ§allâµ§ordered.length}`)
	})

	builder.pushText(page.content) // TODO add image


	if (DEBUG) console.groupEnd()

	return builder.done()
}

/////////////////////////////////////////////////

export {
	renderê“½BookCover,
	renderê“½BookPage,
}
