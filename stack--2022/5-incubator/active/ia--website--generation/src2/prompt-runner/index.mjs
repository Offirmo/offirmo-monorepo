import { strict as assert } from 'node:assert'
import * as fs from 'node:fs'
import * as path from 'node:path'
import os from 'node:os'
import {
	coerce_to_quasi_code,
	normalize_unicode,
} from '@offirmo-private/normalize-string'

/////////////////////////////////////////////////

const EXT = '.prompt'
const DEBUG = false

function loadê“½prompt(fileâ€¿path) {
	let promptâµ§system = ''
	let promptâµ§base = ''
	DEBUG && console.log(`loadê“½prompt(${fileâ€¿path})â€¦`)

	const fileâ€¿abspath = (() => {
		if (fileâ€¿path.endsWith(EXT)) {
			// all good
			return fileâ€¿path
		}

		try {
			fs.readFileSync(fileâ€¿path, 'utf8')
		}
		catch (err) {
			if (err.code === 'EISDIR')
				return path.resolve(fileâ€¿path, `main` + EXT)

			return fileâ€¿path + EXT
		}
	})()
	if (fileâ€¿abspath !== fileâ€¿path) {
		DEBUG && console.log('  resolved to:', fileâ€¿abspath)
	}
	assert(path.extname(fileâ€¿abspath) === '.prompt')

	function setê“½promptâµ§system(line) {
		assert(!promptâµ§system)
		promptâµ§system = line
	}

	const content = fs.readFileSync(fileâ€¿abspath, 'utf8')
	const linesâµ§raw = content.trim().split(os.EOL)
	const lines = linesâµ§raw
		.map(l => l.trim())
		.map(line => {

			switch(true) {
				case (line.startsWith('â®‘')): {
					line = line.slice('â®‘'.length).trim()
					const keyword = coerce_to_redeemable_code(line).split(':')[0]
					console.log({keyword})
					switch(keyword) {
						case 'continued_from': {
							const targetâ€¿path = line.slice(15).trim()
							let targetâ€¿abspath = path.resolve(path.dirname(fileâ€¿abspath), targetâ€¿path)
							const [ps, pb] = loadê“½prompt(targetâ€¿abspath)
							DEBUG && console.log({ps, pb})
							if (ps) setê“½promptâµ§system(ps)
							return pb.join(os.EOL)
						}
						default:
							throw new Error(`Keyword "${keyword}" unknown!`)
					}
				}

				case (line.startsWith('ðŸ‘¤')): {
					setê“½promptâµ§system(line.slice('ðŸ‘¤'.length).trim())
					return undefined
				}

				case (line.startsWith('--')): {
					// comment
					return undefined
				}

				default:
					return line
			}
		})

	promptâµ§base = lines.join(os.EOL).split(os.EOL)
	//console.log(lines)
	return [ promptâµ§system, promptâµ§base ]
}

/////////////////////////////////////////////////
const [ __node, __filename, ...params ] = process.argv
false && console.log({
	__node,
	__filename,
	params,
	cwd: process.cwd(),
})

function main() {
	console.log('Hello from Offirmoâ€™s prompt runner...')

	let [ promptâµ§system, promptâµ§base ] = loadê“½prompt(path.resolve(__filename, params.shift()))
	DEBUG && console.log({ promptâµ§system, promptâµ§base })

	promptâµ§system ||= 'Youâ€™re a helpful assistant'

	console.log(`------- PROMPT BEGIN -------`)
	//console.log(`------- ðŸ‘¤ System prompt -------`)
	console.log(promptâµ§system)
	//console.log(`------- Question -------`)
	console.log(promptâµ§base.join(os.EOL))
	console.log(`------- PROMPT END -------`)
}
main()
